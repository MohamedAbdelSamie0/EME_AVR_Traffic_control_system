
Traffic_control_lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000664  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000664  000006f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800068  00800068  00000700  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000730  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014d1  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000991  00000000  00000000  00001d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b0f  00000000  00000000  000026ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00003200  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b7  00000000  00000000  00003424  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009af  00000000  00000000  000039db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000438a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e6       	ldi	r30, 0x64	; 100
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 64 01 	call	0x2c8	; 0x2c8 <main>
  8a:	0c 94 30 03 	jmp	0x660	; 0x660 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_WriteCommand>:
		case 3:
		lcd_memory_address=col+0x40;
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_WriteCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	63 e0       	ldi	r22, 0x03	; 3
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_WritePin>
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_WritePin>
  aa:	88 b3       	in	r24, 0x18	; 24
  ac:	9c 2f       	mov	r25, r28
  ae:	92 95       	swap	r25
  b0:	9f 70       	andi	r25, 0x0F	; 15
  b2:	97 70       	andi	r25, 0x07	; 7
  b4:	88 7f       	andi	r24, 0xF8	; 248
  b6:	89 2b       	or	r24, r25
  b8:	88 bb       	out	0x18, r24	; 24
  ba:	cc 23       	and	r28, r28
  bc:	24 f4       	brge	.+8      	; 0xc6 <LCD_WriteCommand+0x34>
  be:	88 b3       	in	r24, 0x18	; 24
  c0:	80 61       	ori	r24, 0x10	; 16
  c2:	88 bb       	out	0x18, r24	; 24
  c4:	03 c0       	rjmp	.+6      	; 0xcc <LCD_WriteCommand+0x3a>
  c6:	88 b3       	in	r24, 0x18	; 24
  c8:	8f 7e       	andi	r24, 0xEF	; 239
  ca:	88 bb       	out	0x18, r24	; 24
  cc:	41 e0       	ldi	r20, 0x01	; 1
  ce:	62 e0       	ldi	r22, 0x02	; 2
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_WritePin>
  d6:	8f e1       	ldi	r24, 0x1F	; 31
  d8:	9e e4       	ldi	r25, 0x4E	; 78
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <LCD_WriteCommand+0x48>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <LCD_WriteCommand+0x4e>
  e0:	00 00       	nop
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	62 e0       	ldi	r22, 0x02	; 2
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_WritePin>
  ec:	88 b3       	in	r24, 0x18	; 24
  ee:	9c 2f       	mov	r25, r28
  f0:	97 70       	andi	r25, 0x07	; 7
  f2:	88 7f       	andi	r24, 0xF8	; 248
  f4:	89 2b       	or	r24, r25
  f6:	88 bb       	out	0x18, r24	; 24
  f8:	c3 ff       	sbrs	r28, 3
  fa:	04 c0       	rjmp	.+8      	; 0x104 <LCD_WriteCommand+0x72>
  fc:	88 b3       	in	r24, 0x18	; 24
  fe:	80 61       	ori	r24, 0x10	; 16
 100:	88 bb       	out	0x18, r24	; 24
 102:	03 c0       	rjmp	.+6      	; 0x10a <LCD_WriteCommand+0x78>
 104:	88 b3       	in	r24, 0x18	; 24
 106:	8f 7e       	andi	r24, 0xEF	; 239
 108:	88 bb       	out	0x18, r24	; 24
 10a:	41 e0       	ldi	r20, 0x01	; 1
 10c:	62 e0       	ldi	r22, 0x02	; 2
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_WritePin>
 114:	8f e1       	ldi	r24, 0x1F	; 31
 116:	9e e4       	ldi	r25, 0x4E	; 78
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCD_WriteCommand+0x86>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <LCD_WriteCommand+0x8c>
 11e:	00 00       	nop
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	62 e0       	ldi	r22, 0x02	; 2
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_WritePin>
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <LCD_init>:
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	63 e0       	ldi	r22, 0x03	; 3
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_setPinDirection>
 138:	41 e0       	ldi	r20, 0x01	; 1
 13a:	62 e0       	ldi	r22, 0x02	; 2
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_setPinDirection>
 142:	6f ef       	ldi	r22, 0xFF	; 255
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_setPortDirection>
 14a:	2f ef       	ldi	r18, 0xFF	; 255
 14c:	89 ef       	ldi	r24, 0xF9	; 249
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	21 50       	subi	r18, 0x01	; 1
 152:	80 40       	sbci	r24, 0x00	; 0
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <LCD_init+0x22>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCD_init+0x2c>
 15a:	00 00       	nop
 15c:	88 e2       	ldi	r24, 0x28	; 40
 15e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCommand>
 162:	8f e0       	ldi	r24, 0x0F	; 15
 164:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCommand>
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCommand>
 16e:	08 95       	ret

00000170 <LCD_WriteChar>:
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
 174:	41 e0       	ldi	r20, 0x01	; 1
 176:	63 e0       	ldi	r22, 0x03	; 3
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_WritePin>
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	62 e0       	ldi	r22, 0x02	; 2
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_WritePin>
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_WritePin>
 192:	88 b3       	in	r24, 0x18	; 24
 194:	9c 2f       	mov	r25, r28
 196:	92 95       	swap	r25
 198:	9f 70       	andi	r25, 0x0F	; 15
 19a:	97 70       	andi	r25, 0x07	; 7
 19c:	88 7f       	andi	r24, 0xF8	; 248
 19e:	89 2b       	or	r24, r25
 1a0:	88 bb       	out	0x18, r24	; 24
 1a2:	cc 23       	and	r28, r28
 1a4:	24 f4       	brge	.+8      	; 0x1ae <LCD_WriteChar+0x3e>
 1a6:	88 b3       	in	r24, 0x18	; 24
 1a8:	80 61       	ori	r24, 0x10	; 16
 1aa:	88 bb       	out	0x18, r24	; 24
 1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <LCD_WriteChar+0x44>
 1ae:	88 b3       	in	r24, 0x18	; 24
 1b0:	8f 7e       	andi	r24, 0xEF	; 239
 1b2:	88 bb       	out	0x18, r24	; 24
 1b4:	41 e0       	ldi	r20, 0x01	; 1
 1b6:	62 e0       	ldi	r22, 0x02	; 2
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_WritePin>
 1be:	8f e1       	ldi	r24, 0x1F	; 31
 1c0:	9e e4       	ldi	r25, 0x4E	; 78
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCD_WriteChar+0x52>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <LCD_WriteChar+0x58>
 1c8:	00 00       	nop
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	62 e0       	ldi	r22, 0x02	; 2
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_WritePin>
 1d4:	88 b3       	in	r24, 0x18	; 24
 1d6:	9c 2f       	mov	r25, r28
 1d8:	97 70       	andi	r25, 0x07	; 7
 1da:	88 7f       	andi	r24, 0xF8	; 248
 1dc:	89 2b       	or	r24, r25
 1de:	88 bb       	out	0x18, r24	; 24
 1e0:	c3 ff       	sbrs	r28, 3
 1e2:	04 c0       	rjmp	.+8      	; 0x1ec <LCD_WriteChar+0x7c>
 1e4:	88 b3       	in	r24, 0x18	; 24
 1e6:	80 61       	ori	r24, 0x10	; 16
 1e8:	88 bb       	out	0x18, r24	; 24
 1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <LCD_WriteChar+0x82>
 1ec:	88 b3       	in	r24, 0x18	; 24
 1ee:	8f 7e       	andi	r24, 0xEF	; 239
 1f0:	88 bb       	out	0x18, r24	; 24
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	62 e0       	ldi	r22, 0x02	; 2
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_WritePin>
 1fc:	8f e1       	ldi	r24, 0x1F	; 31
 1fe:	9e e4       	ldi	r25, 0x4E	; 78
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <LCD_WriteChar+0x90>
 204:	00 c0       	rjmp	.+0      	; 0x206 <LCD_WriteChar+0x96>
 206:	00 00       	nop
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	62 e0       	ldi	r22, 0x02	; 2
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_WritePin>
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <LCD_WriteString>:
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	ec 01       	movw	r28, r24
 21c:	03 c0       	rjmp	.+6      	; 0x224 <LCD_WriteString+0xe>
 21e:	21 96       	adiw	r28, 0x01	; 1
 220:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_WriteChar>
 224:	88 81       	ld	r24, Y
 226:	81 11       	cpse	r24, r1
 228:	fa cf       	rjmp	.-12     	; 0x21e <LCD_WriteString+0x8>
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <LCD_Clear>:
}

void LCD_Clear(void)
{
	LCD_WriteCommand(LCD_CLEAR_COMMAND);
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCommand>
 236:	08 95       	ret

00000238 <LED_init>:
	{
		case ON:
		DIO_WritePin(GREEN_PORT, GREEN_PIN, PIN_HIGH);
		break;
		case OFF:
		DIO_WritePin(GREEN_PORT, GREEN_PIN, PIN_LOW);
 238:	41 e0       	ldi	r20, 0x01	; 1
 23a:	67 e0       	ldi	r22, 0x07	; 7
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_setPinDirection>
 242:	41 e0       	ldi	r20, 0x01	; 1
 244:	66 e0       	ldi	r22, 0x06	; 6
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_setPinDirection>
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	64 e0       	ldi	r22, 0x04	; 4
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_setPinDirection>
 256:	41 e0       	ldi	r20, 0x01	; 1
 258:	65 e0       	ldi	r22, 0x05	; 5
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_setPinDirection>
 260:	40 e0       	ldi	r20, 0x00	; 0
 262:	67 e0       	ldi	r22, 0x07	; 7
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_WritePin>
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	66 e0       	ldi	r22, 0x06	; 6
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_WritePin>
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	64 e0       	ldi	r22, 0x04	; 4
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_WritePin>
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	65 e0       	ldi	r22, 0x05	; 5
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_WritePin>
 288:	08 95       	ret

0000028a <RED_LED>:
 28a:	88 23       	and	r24, r24
 28c:	39 f0       	breq	.+14     	; 0x29c <RED_LED+0x12>
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	51 f4       	brne	.+20     	; 0x2a6 <RED_LED+0x1c>
 292:	41 e0       	ldi	r20, 0x01	; 1
 294:	67 e0       	ldi	r22, 0x07	; 7
 296:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_WritePin>
 29a:	08 95       	ret
 29c:	40 e0       	ldi	r20, 0x00	; 0
 29e:	67 e0       	ldi	r22, 0x07	; 7
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_WritePin>
 2a6:	08 95       	ret

000002a8 <BLUE_LED>:
		break;
	}
}

void BLUE_LED(uint8_t state){
	switch (state)
 2a8:	88 23       	and	r24, r24
 2aa:	41 f0       	breq	.+16     	; 0x2bc <BLUE_LED+0x14>
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	59 f4       	brne	.+22     	; 0x2c6 <BLUE_LED+0x1e>
	{
		case ON:
		DIO_WritePin(BLUE_PORT, BLUE_PIN, PIN_HIGH);
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	65 e0       	ldi	r22, 0x05	; 5
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_WritePin>
		break;
 2ba:	08 95       	ret
		case OFF:
		DIO_WritePin(BLUE_PORT, BLUE_PIN, PIN_LOW);
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	65 e0       	ldi	r22, 0x05	; 5
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_WritePin>
 2c6:	08 95       	ret

000002c8 <main>:

EXTi_INTERRUPTconfiguration *external_interrupt_config;

int main(void)
{
	external_interrupt_config->EXTI_source = EX_INT1;
 2c8:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 2cc:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	80 83       	st	Z, r24
	external_interrupt_config->EXTI_trigger = FALLING_EDGE;
 2d4:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 2d8:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 2dc:	82 e0       	ldi	r24, 0x02	; 2
 2de:	81 83       	std	Z+1, r24	; 0x01
	external_interrupt_config->IRQ_en = GLOBAL_INT1_EN;
 2e0:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 2e4:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 2e8:	87 e0       	ldi	r24, 0x07	; 7
 2ea:	82 83       	std	Z+2, r24	; 0x02
	external_interrupt_config->Flag_clear = GLOBAL_INT1_FLAG;
 2ec:	83 83       	std	Z+3, r24	; 0x03
	
	LCD_init();
 2ee:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_init>
	LCD_Clear();
 2f2:	0e 94 18 01 	call	0x230	; 0x230 <LCD_Clear>
	
		DIO_setPinDirection(DIO_PORTA, DIO_PIN4, PIN_OUTPUT);
 2f6:	41 e0       	ldi	r20, 0x01	; 1
 2f8:	64 e0       	ldi	r22, 0x04	; 4
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_setPinDirection>
		DIO_setPinDirection(DIO_PORTA, DIO_PIN5, PIN_OUTPUT);
 300:	41 e0       	ldi	r20, 0x01	; 1
 302:	65 e0       	ldi	r22, 0x05	; 5
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_setPinDirection>
		DIO_setPinDirection(DIO_PORTA, DIO_PIN6, PIN_OUTPUT);
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	66 e0       	ldi	r22, 0x06	; 6
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_setPinDirection>
		DIO_setPinDirection(DIO_PORTB, DIO_PIN7, PIN_OUTPUT);
 314:	41 e0       	ldi	r20, 0x01	; 1
 316:	67 e0       	ldi	r22, 0x07	; 7
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_setPinDirection>
		
		EXTI_interruptconfig(external_interrupt_config);
 31e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 322:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__data_end+0x1>
 326:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <EXTI_interruptconfig>
 32a:	ff cf       	rjmp	.-2      	; 0x32a <main+0x62>

0000032c <__vector_2>:
    {
    }
}

ISR(INT1_vect)
{
 32c:	1f 92       	push	r1
 32e:	0f 92       	push	r0
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	0f 92       	push	r0
 334:	11 24       	eor	r1, r1
 336:	2f 93       	push	r18
 338:	3f 93       	push	r19
 33a:	4f 93       	push	r20
 33c:	5f 93       	push	r21
 33e:	6f 93       	push	r22
 340:	7f 93       	push	r23
 342:	8f 93       	push	r24
 344:	9f 93       	push	r25
 346:	af 93       	push	r26
 348:	bf 93       	push	r27
 34a:	ef 93       	push	r30
 34c:	ff 93       	push	r31
	LCD_Clear();
 34e:	0e 94 18 01 	call	0x230	; 0x230 <LCD_Clear>
	LED_init();
 352:	0e 94 1c 01 	call	0x238	; 0x238 <LED_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 356:	2f ef       	ldi	r18, 0xFF	; 255
 358:	82 e5       	ldi	r24, 0x52	; 82
 35a:	97 e0       	ldi	r25, 0x07	; 7
 35c:	21 50       	subi	r18, 0x01	; 1
 35e:	80 40       	sbci	r24, 0x00	; 0
 360:	90 40       	sbci	r25, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <__vector_2+0x30>
 364:	00 c0       	rjmp	.+0      	; 0x366 <__vector_2+0x3a>
 366:	00 00       	nop
	_delay_ms(150);
	const uint8_t *str = "aaaaaa";
	LCD_WriteString(str);
 368:	80 e6       	ldi	r24, 0x60	; 96
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_WriteString>
	
	RED_LED(ON);
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	0e 94 45 01 	call	0x28a	; 0x28a <RED_LED>
 376:	2f ef       	ldi	r18, 0xFF	; 255
 378:	82 e5       	ldi	r24, 0x52	; 82
 37a:	97 e0       	ldi	r25, 0x07	; 7
 37c:	21 50       	subi	r18, 0x01	; 1
 37e:	80 40       	sbci	r24, 0x00	; 0
 380:	90 40       	sbci	r25, 0x00	; 0
 382:	e1 f7       	brne	.-8      	; 0x37c <__vector_2+0x50>
 384:	00 c0       	rjmp	.+0      	; 0x386 <__vector_2+0x5a>
 386:	00 00       	nop
	_delay_ms(150);
	BLUE_LED(ON);
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <BLUE_LED>
 38e:	2f ef       	ldi	r18, 0xFF	; 255
 390:	82 e5       	ldi	r24, 0x52	; 82
 392:	97 e0       	ldi	r25, 0x07	; 7
 394:	21 50       	subi	r18, 0x01	; 1
 396:	80 40       	sbci	r24, 0x00	; 0
 398:	90 40       	sbci	r25, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <__vector_2+0x68>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <__vector_2+0x72>
 39e:	00 00       	nop
	_delay_ms(150);
	PORTA ^= (1<<4);
 3a0:	9b b3       	in	r25, 0x1b	; 27
 3a2:	80 e1       	ldi	r24, 0x10	; 16
 3a4:	89 27       	eor	r24, r25
 3a6:	8b bb       	out	0x1b, r24	; 27
 3a8:	2f ef       	ldi	r18, 0xFF	; 255
 3aa:	82 e5       	ldi	r24, 0x52	; 82
 3ac:	97 e0       	ldi	r25, 0x07	; 7
 3ae:	21 50       	subi	r18, 0x01	; 1
 3b0:	80 40       	sbci	r24, 0x00	; 0
 3b2:	90 40       	sbci	r25, 0x00	; 0
 3b4:	e1 f7       	brne	.-8      	; 0x3ae <__vector_2+0x82>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <__vector_2+0x8c>
 3b8:	00 00       	nop
	_delay_ms(150);
	PORTA ^= (1<<5);
 3ba:	9b b3       	in	r25, 0x1b	; 27
 3bc:	80 e2       	ldi	r24, 0x20	; 32
 3be:	89 27       	eor	r24, r25
 3c0:	8b bb       	out	0x1b, r24	; 27
 3c2:	2f ef       	ldi	r18, 0xFF	; 255
 3c4:	82 e5       	ldi	r24, 0x52	; 82
 3c6:	97 e0       	ldi	r25, 0x07	; 7
 3c8:	21 50       	subi	r18, 0x01	; 1
 3ca:	80 40       	sbci	r24, 0x00	; 0
 3cc:	90 40       	sbci	r25, 0x00	; 0
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <__vector_2+0x9c>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <__vector_2+0xa6>
 3d2:	00 00       	nop
	_delay_ms(150);
	SetBit(GIFR, external_interrupt_config->Flag_clear);
 3d4:	2a b7       	in	r18, 0x3a	; 58
 3d6:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 3da:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	03 80       	ldd	r0, Z+3	; 0x03
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <__vector_2+0xbe>
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	0a 94       	dec	r0
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <__vector_2+0xba>
 3ee:	82 2b       	or	r24, r18
 3f0:	8a bf       	out	0x3a, r24	; 58
 3f2:	ff 91       	pop	r31
 3f4:	ef 91       	pop	r30
 3f6:	bf 91       	pop	r27
 3f8:	af 91       	pop	r26
 3fa:	9f 91       	pop	r25
 3fc:	8f 91       	pop	r24
 3fe:	7f 91       	pop	r23
 400:	6f 91       	pop	r22
 402:	5f 91       	pop	r21
 404:	4f 91       	pop	r20
 406:	3f 91       	pop	r19
 408:	2f 91       	pop	r18
 40a:	0f 90       	pop	r0
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	0f 90       	pop	r0
 410:	1f 90       	pop	r1
 412:	18 95       	reti

00000414 <DIO_setPortDirection>:
	}
}

void DIO_setPortDirection(uint8_t Port, uint8_t dir)
{
	switch(Port)
 414:	81 30       	cpi	r24, 0x01	; 1
 416:	41 f0       	breq	.+16     	; 0x428 <DIO_setPortDirection+0x14>
 418:	28 f0       	brcs	.+10     	; 0x424 <DIO_setPortDirection+0x10>
 41a:	82 30       	cpi	r24, 0x02	; 2
 41c:	39 f0       	breq	.+14     	; 0x42c <DIO_setPortDirection+0x18>
 41e:	83 30       	cpi	r24, 0x03	; 3
 420:	39 f0       	breq	.+14     	; 0x430 <DIO_setPortDirection+0x1c>
 422:	08 95       	ret
	{
		case DIO_PORTA:
		DDRA = dir;
 424:	6a bb       	out	0x1a, r22	; 26
		break;
 426:	08 95       	ret
		
		case DIO_PORTB:
		DDRB = dir;
 428:	67 bb       	out	0x17, r22	; 23
		break;
 42a:	08 95       	ret
		
		case DIO_PORTC:
		DDRC = dir;
 42c:	64 bb       	out	0x14, r22	; 20
		break;
 42e:	08 95       	ret
		
		case DIO_PORTD:
		DDRD = dir;
 430:	61 bb       	out	0x11, r22	; 17
 432:	08 95       	ret

00000434 <DIO_setPinDirection>:
	}
}

void DIO_setPinDirection(uint8_t Port, uint8_t pin, uint8_t dir)
{
	if( dir == DIO_PIN_OUTPUT)
 434:	41 30       	cpi	r20, 0x01	; 1
 436:	a1 f5       	brne	.+104    	; 0x4a0 <DIO_setPinDirection+0x6c>
	{
		switch(Port)
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	89 f0       	breq	.+34     	; 0x45e <DIO_setPinDirection+0x2a>
 43c:	28 f0       	brcs	.+10     	; 0x448 <DIO_setPinDirection+0x14>
 43e:	82 30       	cpi	r24, 0x02	; 2
 440:	c9 f0       	breq	.+50     	; 0x474 <DIO_setPinDirection+0x40>
 442:	83 30       	cpi	r24, 0x03	; 3
 444:	11 f1       	breq	.+68     	; 0x48a <DIO_setPinDirection+0x56>
 446:	08 95       	ret
		{
			case DIO_PORTA:
			SetBit(DDRA, pin);
 448:	2a b3       	in	r18, 0x1a	; 26
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	02 c0       	rjmp	.+4      	; 0x454 <DIO_setPinDirection+0x20>
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	6a 95       	dec	r22
 456:	e2 f7       	brpl	.-8      	; 0x450 <DIO_setPinDirection+0x1c>
 458:	82 2b       	or	r24, r18
 45a:	8a bb       	out	0x1a, r24	; 26
			break;
 45c:	08 95       	ret
			
			case DIO_PORTB:
			SetBit(DDRB, pin);
 45e:	27 b3       	in	r18, 0x17	; 23
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	02 c0       	rjmp	.+4      	; 0x46a <DIO_setPinDirection+0x36>
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	6a 95       	dec	r22
 46c:	e2 f7       	brpl	.-8      	; 0x466 <DIO_setPinDirection+0x32>
 46e:	82 2b       	or	r24, r18
 470:	87 bb       	out	0x17, r24	; 23
			break;
 472:	08 95       	ret
			
			case DIO_PORTC:
			SetBit(DDRC, pin);
 474:	24 b3       	in	r18, 0x14	; 20
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	02 c0       	rjmp	.+4      	; 0x480 <DIO_setPinDirection+0x4c>
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	6a 95       	dec	r22
 482:	e2 f7       	brpl	.-8      	; 0x47c <DIO_setPinDirection+0x48>
 484:	82 2b       	or	r24, r18
 486:	84 bb       	out	0x14, r24	; 20
			break;
 488:	08 95       	ret
			
			case DIO_PORTD:
			SetBit(DDRD, pin);
 48a:	21 b3       	in	r18, 0x11	; 17
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	02 c0       	rjmp	.+4      	; 0x496 <DIO_setPinDirection+0x62>
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	6a 95       	dec	r22
 498:	e2 f7       	brpl	.-8      	; 0x492 <DIO_setPinDirection+0x5e>
 49a:	82 2b       	or	r24, r18
 49c:	81 bb       	out	0x11, r24	; 17
			break;
 49e:	08 95       	ret
			default:
			/*do nothing*/
			break;
		}
	}
	else if(dir == DIO_PIN_INPUT)
 4a0:	41 11       	cpse	r20, r1
 4a2:	37 c0       	rjmp	.+110    	; 0x512 <DIO_setPinDirection+0xde>
	{
		switch(Port)
 4a4:	81 30       	cpi	r24, 0x01	; 1
 4a6:	91 f0       	breq	.+36     	; 0x4cc <DIO_setPinDirection+0x98>
 4a8:	28 f0       	brcs	.+10     	; 0x4b4 <DIO_setPinDirection+0x80>
 4aa:	82 30       	cpi	r24, 0x02	; 2
 4ac:	d9 f0       	breq	.+54     	; 0x4e4 <DIO_setPinDirection+0xb0>
 4ae:	83 30       	cpi	r24, 0x03	; 3
 4b0:	29 f1       	breq	.+74     	; 0x4fc <DIO_setPinDirection+0xc8>
 4b2:	08 95       	ret
		{
			case DIO_PORTA:
			ClearBit(DDRA, pin);
 4b4:	2a b3       	in	r18, 0x1a	; 26
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <DIO_setPinDirection+0x8c>
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	6a 95       	dec	r22
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <DIO_setPinDirection+0x88>
 4c4:	80 95       	com	r24
 4c6:	82 23       	and	r24, r18
 4c8:	8a bb       	out	0x1a, r24	; 26
			break;
 4ca:	08 95       	ret
			
			case DIO_PORTB:
			ClearBit(DDRB, pin);
 4cc:	27 b3       	in	r18, 0x17	; 23
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_setPinDirection+0xa4>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	6a 95       	dec	r22
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_setPinDirection+0xa0>
 4dc:	80 95       	com	r24
 4de:	82 23       	and	r24, r18
 4e0:	87 bb       	out	0x17, r24	; 23
			break;
 4e2:	08 95       	ret
			
			case DIO_PORTC:
			ClearBit(DDRC, pin);
 4e4:	24 b3       	in	r18, 0x14	; 20
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_setPinDirection+0xbc>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	6a 95       	dec	r22
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_setPinDirection+0xb8>
 4f4:	80 95       	com	r24
 4f6:	82 23       	and	r24, r18
 4f8:	84 bb       	out	0x14, r24	; 20
			break;
 4fa:	08 95       	ret
			
			case DIO_PORTD:
			ClearBit(DDRD, pin);
 4fc:	21 b3       	in	r18, 0x11	; 17
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_setPinDirection+0xd4>
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_setPinDirection+0xd0>
 50c:	80 95       	com	r24
 50e:	82 23       	and	r24, r18
 510:	81 bb       	out	0x11, r24	; 17
 512:	08 95       	ret

00000514 <DIO_WritePin>:
	}
}

void DIO_WritePin(uint8_t Port, uint8_t pin, uint8_t val)
{
	if(val)
 514:	44 23       	and	r20, r20
 516:	a1 f1       	breq	.+104    	; 0x580 <DIO_WritePin+0x6c>
	{
		switch(Port)
 518:	81 30       	cpi	r24, 0x01	; 1
 51a:	89 f0       	breq	.+34     	; 0x53e <DIO_WritePin+0x2a>
 51c:	28 f0       	brcs	.+10     	; 0x528 <DIO_WritePin+0x14>
 51e:	82 30       	cpi	r24, 0x02	; 2
 520:	c9 f0       	breq	.+50     	; 0x554 <DIO_WritePin+0x40>
 522:	83 30       	cpi	r24, 0x03	; 3
 524:	11 f1       	breq	.+68     	; 0x56a <DIO_WritePin+0x56>
 526:	08 95       	ret
		{
			case DIO_PORTA:
			SetBit(PORTA, pin);
 528:	2b b3       	in	r18, 0x1b	; 27
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_WritePin+0x20>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	6a 95       	dec	r22
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_WritePin+0x1c>
 538:	82 2b       	or	r24, r18
 53a:	8b bb       	out	0x1b, r24	; 27
			break;
 53c:	08 95       	ret
		
			case DIO_PORTB:
			SetBit(PORTB, pin);
 53e:	28 b3       	in	r18, 0x18	; 24
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_WritePin+0x36>
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	6a 95       	dec	r22
 54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_WritePin+0x32>
 54e:	82 2b       	or	r24, r18
 550:	88 bb       	out	0x18, r24	; 24
			break;
 552:	08 95       	ret
		
			case DIO_PORTC:
			SetBit(PORTC, pin);
 554:	25 b3       	in	r18, 0x15	; 21
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_WritePin+0x4c>
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	6a 95       	dec	r22
 562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_WritePin+0x48>
 564:	82 2b       	or	r24, r18
 566:	85 bb       	out	0x15, r24	; 21
			break;
 568:	08 95       	ret
		
			case DIO_PORTD:
			SetBit(PORTD, pin);
 56a:	22 b3       	in	r18, 0x12	; 18
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	02 c0       	rjmp	.+4      	; 0x576 <DIO_WritePin+0x62>
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	6a 95       	dec	r22
 578:	e2 f7       	brpl	.-8      	; 0x572 <DIO_WritePin+0x5e>
 57a:	82 2b       	or	r24, r18
 57c:	82 bb       	out	0x12, r24	; 18
			break;
 57e:	08 95       	ret
			break;
		}
	}
	else
	{
		switch(Port)
 580:	81 30       	cpi	r24, 0x01	; 1
 582:	91 f0       	breq	.+36     	; 0x5a8 <DIO_WritePin+0x94>
 584:	28 f0       	brcs	.+10     	; 0x590 <DIO_WritePin+0x7c>
 586:	82 30       	cpi	r24, 0x02	; 2
 588:	d9 f0       	breq	.+54     	; 0x5c0 <DIO_WritePin+0xac>
 58a:	83 30       	cpi	r24, 0x03	; 3
 58c:	29 f1       	breq	.+74     	; 0x5d8 <DIO_WritePin+0xc4>
 58e:	08 95       	ret
		{
			case DIO_PORTA:
			ClearBit(PORTA, pin);
 590:	2b b3       	in	r18, 0x1b	; 27
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_WritePin+0x88>
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	6a 95       	dec	r22
 59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_WritePin+0x84>
 5a0:	80 95       	com	r24
 5a2:	82 23       	and	r24, r18
 5a4:	8b bb       	out	0x1b, r24	; 27
			break;
 5a6:	08 95       	ret
			
			case DIO_PORTB:
			ClearBit(PORTB, pin);
 5a8:	28 b3       	in	r18, 0x18	; 24
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_WritePin+0xa0>
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	6a 95       	dec	r22
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_WritePin+0x9c>
 5b8:	80 95       	com	r24
 5ba:	82 23       	and	r24, r18
 5bc:	88 bb       	out	0x18, r24	; 24
			break;
 5be:	08 95       	ret
			
			case DIO_PORTC:
			ClearBit(PORTC, pin);
 5c0:	25 b3       	in	r18, 0x15	; 21
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_WritePin+0xb8>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	6a 95       	dec	r22
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_WritePin+0xb4>
 5d0:	80 95       	com	r24
 5d2:	82 23       	and	r24, r18
 5d4:	85 bb       	out	0x15, r24	; 21
			break;
 5d6:	08 95       	ret
			
			case DIO_PORTD:
			ClearBit(PORTD, pin);
 5d8:	22 b3       	in	r18, 0x12	; 18
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_WritePin+0xd0>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	6a 95       	dec	r22
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_WritePin+0xcc>
 5e8:	80 95       	com	r24
 5ea:	82 23       	and	r24, r18
 5ec:	82 bb       	out	0x12, r24	; 18
 5ee:	08 95       	ret

000005f0 <EXTI_GlobalSet>:


void EXTI_GlobalSet()
{
	#if	GLOBAL_INTERRUPT == GLOBAL_INTERRUPT_ENABLE
		SetBit(SREG, 7);
 5f0:	8f b7       	in	r24, 0x3f	; 63
 5f2:	80 68       	ori	r24, 0x80	; 128
 5f4:	8f bf       	out	0x3f, r24	; 63
 5f6:	08 95       	ret

000005f8 <EXTI_interruptconfig>:
		ClearBit(SREG, 7);
	#endif
}

void EXTI_interruptconfig(EXTi_INTERRUPTconfiguration *config_struct)
{
 5f8:	cf 93       	push	r28
 5fa:	df 93       	push	r29
 5fc:	ec 01       	movw	r28, r24
	/*	enable gloabl interrupts	*/
	EXTI_GlobalSet();
 5fe:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <EXTI_GlobalSet>
	
		/*	enable external interrupt request	*/
		SetBit(GICR, config_struct->IRQ_en);
 602:	2b b7       	in	r18, 0x3b	; 59
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	0a 80       	ldd	r0, Y+2	; 0x02
 60a:	02 c0       	rjmp	.+4      	; 0x610 <EXTI_interruptconfig+0x18>
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	0a 94       	dec	r0
 612:	e2 f7       	brpl	.-8      	; 0x60c <EXTI_interruptconfig+0x14>
 614:	82 2b       	or	r24, r18
 616:	8b bf       	out	0x3b, r24	; 59
		
		switch(config_struct->EXTI_source)
 618:	88 81       	ld	r24, Y
 61a:	81 30       	cpi	r24, 0x01	; 1
 61c:	49 f0       	breq	.+18     	; 0x630 <EXTI_interruptconfig+0x38>
 61e:	18 f0       	brcs	.+6      	; 0x626 <EXTI_interruptconfig+0x2e>
 620:	82 30       	cpi	r24, 0x02	; 2
 622:	89 f0       	breq	.+34     	; 0x646 <EXTI_interruptconfig+0x4e>
 624:	1a c0       	rjmp	.+52     	; 0x65a <EXTI_interruptconfig+0x62>
		{
		/*	external interrupts trigger control	*/
		case EX_INT0:
			MCUCR |= config_struct->EXTI_trigger;
 626:	95 b7       	in	r25, 0x35	; 53
 628:	89 81       	ldd	r24, Y+1	; 0x01
 62a:	89 2b       	or	r24, r25
 62c:	85 bf       	out	0x35, r24	; 53
			break;
 62e:	15 c0       	rjmp	.+42     	; 0x65a <EXTI_interruptconfig+0x62>
			
		case EX_INT1:
			MCUCR |= config_struct->EXTI_trigger << 2;
 630:	25 b7       	in	r18, 0x35	; 53
 632:	99 81       	ldd	r25, Y+1	; 0x01
 634:	89 2f       	mov	r24, r25
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	88 0f       	add	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	82 2b       	or	r24, r18
 642:	85 bf       	out	0x35, r24	; 53
			break;
 644:	0a c0       	rjmp	.+20     	; 0x65a <EXTI_interruptconfig+0x62>
			
		case EX_INT2:
			if(config_struct->EXTI_trigger == FALLING_EDGE)
 646:	89 81       	ldd	r24, Y+1	; 0x01
 648:	82 30       	cpi	r24, 0x02	; 2
 64a:	21 f4       	brne	.+8      	; 0x654 <EXTI_interruptconfig+0x5c>
				ClearBit(MCUCSR, 6);
 64c:	84 b7       	in	r24, 0x34	; 52
 64e:	8f 7b       	andi	r24, 0xBF	; 191
 650:	84 bf       	out	0x34, r24	; 52
 652:	03 c0       	rjmp	.+6      	; 0x65a <EXTI_interruptconfig+0x62>
			else
				SetBit(MCUCSR, 6);
 654:	84 b7       	in	r24, 0x34	; 52
 656:	80 64       	ori	r24, 0x40	; 64
 658:	84 bf       	out	0x34, r24	; 52
		}
	
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	08 95       	ret

00000660 <_exit>:
 660:	f8 94       	cli

00000662 <__stop_program>:
 662:	ff cf       	rjmp	.-2      	; 0x662 <__stop_program>
