
Traffic_control_lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000008be  00000952  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800088  00800088  0000097a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000097a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e69  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c15  00000000  00000000  000029c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f21  00000000  00000000  000035de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d0  00000000  00000000  00004500  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000669  00000000  00000000  000047d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e35  00000000  00000000  00004e39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005c6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 38       	cpi	r26, 0x8A	; 138
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 32 03 	call	0x664	; 0x664 <main>
  8a:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <delay_5secs>:

uint8_t g_BREAK_DELAY = 1;
uint8_t traffic_light_state = green_state;

void delay_5secs(uint32_t delay)
{
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	6b 01       	movw	r12, r22
  9c:	7c 01       	movw	r14, r24
	   for (uint16_t i = 0; i < delay; i++) {
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0b c0       	rjmp	.+22     	; 0xba <delay_5secs+0x28>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	ef e9       	ldi	r30, 0x9F	; 159
  a6:	ff e0       	ldi	r31, 0x0F	; 15
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <delay_5secs+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <delay_5secs+0x1c>
  ae:	00 00       	nop
		   // Each iteration of this loop introduces a delay of about 1ms using _delay_us
		   _delay_us(1000);  // Delay for 1000 microseconds (1ms)
		   if(!g_BREAK_DELAY)
  b0:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <g_BREAK_DELAY>
  b4:	22 23       	and	r18, r18
  b6:	49 f0       	breq	.+18     	; 0xca <delay_5secs+0x38>
uint8_t g_BREAK_DELAY = 1;
uint8_t traffic_light_state = green_state;

void delay_5secs(uint32_t delay)
{
	   for (uint16_t i = 0; i < delay; i++) {
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	ac 01       	movw	r20, r24
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	4c 15       	cp	r20, r12
  c2:	5d 05       	cpc	r21, r13
  c4:	6e 05       	cpc	r22, r14
  c6:	7f 05       	cpc	r23, r15
  c8:	68 f3       	brcs	.-38     	; 0xa4 <delay_5secs+0x12>
		   // Each iteration of this loop introduces a delay of about 1ms using _delay_us
		   _delay_us(1000);  // Delay for 1000 microseconds (1ms)
		   if(!g_BREAK_DELAY)
				break;
	   }
}
  ca:	ff 90       	pop	r15
  cc:	ef 90       	pop	r14
  ce:	df 90       	pop	r13
  d0:	cf 90       	pop	r12
  d2:	08 95       	ret

000000d4 <YellowBlink>:

/*Function to blink yellow led	*/
void YellowBlink(){
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
	int count = 5;
  d8:	c5 e0       	ldi	r28, 0x05	; 5
  da:	d0 e0       	ldi	r29, 0x00	; 0
	while(--count){
  dc:	09 c0       	rjmp	.+18     	; 0xf0 <YellowBlink+0x1c>
		YELLOW_LED(ON);
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 03 03 	call	0x606	; 0x606 <YELLOW_LED>
		delay_5secs(1000);
  e4:	68 ee       	ldi	r22, 0xE8	; 232
  e6:	73 e0       	ldi	r23, 0x03	; 3
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 49 00 	call	0x92	; 0x92 <delay_5secs>
}

/*Function to blink yellow led	*/
void YellowBlink(){
	int count = 5;
	while(--count){
  f0:	21 97       	sbiw	r28, 0x01	; 1
  f2:	a9 f7       	brne	.-22     	; 0xde <YellowBlink+0xa>
		YELLOW_LED(ON);
		delay_5secs(1000);
	}
	YELLOW_LED(OFF);
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 03 03 	call	0x606	; 0x606 <YELLOW_LED>
}
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <Traffic_state>:

void Traffic_state()
{
	while(1)
	{
		switch(traffic_light_state)
 100:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 104:	8b 30       	cpi	r24, 0x0B	; 11
 106:	09 f1       	breq	.+66     	; 0x14a <Traffic_state+0x4a>
 108:	8c 30       	cpi	r24, 0x0C	; 12
 10a:	99 f1       	breq	.+102    	; 0x172 <Traffic_state+0x72>
 10c:	8a 30       	cpi	r24, 0x0A	; 10
 10e:	c1 f7       	brne	.-16     	; 0x100 <Traffic_state>
		{
			case green_state:

			g_BREAK_DELAY = 1;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <g_BREAK_DELAY>
			GREEN_LED(ON);
 116:	0e 94 12 03 	call	0x624	; 0x624 <GREEN_LED>
			delay_5secs(FIVE_SEC);
 11a:	68 e8       	ldi	r22, 0x88	; 136
 11c:	73 e1       	ldi	r23, 0x13	; 19
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 49 00 	call	0x92	; 0x92 <delay_5secs>
			GREEN_LED(OFF);
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 12 03 	call	0x624	; 0x624 <GREEN_LED>
			BLUE_LED(OFF);
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 22 03 	call	0x644	; 0x644 <BLUE_LED>
			if(g_BREAK_DELAY)
 132:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <g_BREAK_DELAY>
 136:	88 23       	and	r24, r24
 138:	21 f0       	breq	.+8      	; 0x142 <Traffic_state+0x42>
				traffic_light_state = yellow_state;
 13a:	8b e0       	ldi	r24, 0x0B	; 11
 13c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 140:	df cf       	rjmp	.-66     	; 0x100 <Traffic_state>
			else
				traffic_light_state = green_state;
 142:	8a e0       	ldi	r24, 0x0A	; 10
 144:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 148:	db cf       	rjmp	.-74     	; 0x100 <Traffic_state>
			break;
		
			case yellow_state:
			g_BREAK_DELAY = 1;
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <g_BREAK_DELAY>
			YellowBlink();
 150:	0e 94 6a 00 	call	0xd4	; 0xd4 <YellowBlink>
			BLUE_LED(OFF);
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 22 03 	call	0x644	; 0x644 <BLUE_LED>
			if(traffic_light_state == yellow_state)
 15a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 15e:	8b 30       	cpi	r24, 0x0B	; 11
 160:	21 f4       	brne	.+8      	; 0x16a <Traffic_state+0x6a>
				traffic_light_state = red_state;
 162:	8c e0       	ldi	r24, 0x0C	; 12
 164:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 168:	cb cf       	rjmp	.-106    	; 0x100 <Traffic_state>
			else
				traffic_light_state = green_state;
 16a:	8a e0       	ldi	r24, 0x0A	; 10
 16c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 170:	c7 cf       	rjmp	.-114    	; 0x100 <Traffic_state>
			break;
		
			case red_state:
			g_BREAK_DELAY = 1;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <g_BREAK_DELAY>
		
			RED_LED(ON);
 178:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <RED_LED>
			BLUE_LED(ON);
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 22 03 	call	0x644	; 0x644 <BLUE_LED>
			delay_5secs(FIVE_SEC);
 182:	68 e8       	ldi	r22, 0x88	; 136
 184:	73 e1       	ldi	r23, 0x13	; 19
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 49 00 	call	0x92	; 0x92 <delay_5secs>
			RED_LED(OFF);
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <RED_LED>
			BLUE_LED(OFF);
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	0e 94 22 03 	call	0x644	; 0x644 <BLUE_LED>
			traffic_light_state = green_state;
 19a:	8a e0       	ldi	r24, 0x0A	; 10
 19c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 1a0:	af cf       	rjmp	.-162    	; 0x100 <Traffic_state>

000001a2 <PedestrianButton_init>:

extern uint8_t g_BREAK_DELAY;
extern uint8_t traffic_light_state;

void PedestrianButton_init(){
	DIO_setPinDirection(PEDESTRIAN_PORT, PEDESTRIAN_PIN, DIO_PIN_INPUT);
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	63 e0       	ldi	r22, 0x03	; 3
 1a6:	83 e0       	ldi	r24, 0x03	; 3
 1a8:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_setPinDirection>
	
	EXTI_Config->EXTI_source = EX_INT1;
 1ac:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <__data_end>
 1b0:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <__data_end+0x1>
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	80 83       	st	Z, r24
	EXTI_Config->EXTI_trigger = ANY_LOGIC_CHANGE;
 1b8:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <__data_end>
 1bc:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <__data_end+0x1>
 1c0:	81 83       	std	Z+1, r24	; 0x01
	EXTI_Config->IRQ_en = GLOBAL_INT1_EN;
 1c2:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 1c6:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 1ca:	27 e0       	ldi	r18, 0x07	; 7
 1cc:	fc 01       	movw	r30, r24
 1ce:	22 83       	std	Z+2, r18	; 0x02
	EXTI_Config->Flag_clear = GLOBAL_INT1_FLAG;
 1d0:	23 83       	std	Z+3, r18	; 0x03
	
	EXTI_interruptconfig(EXTI_Config);
 1d2:	0e 94 29 04 	call	0x852	; 0x852 <EXTI_interruptconfig>
 1d6:	08 95       	ret

000001d8 <__vector_2>:
}

ISR(INT1_vect){
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	2f 93       	push	r18
 1e4:	3f 93       	push	r19
 1e6:	4f 93       	push	r20
 1e8:	5f 93       	push	r21
 1ea:	6f 93       	push	r22
 1ec:	7f 93       	push	r23
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	af 93       	push	r26
 1f4:	bf 93       	push	r27
 1f6:	ef 93       	push	r30
 1f8:	ff 93       	push	r31
	
	/*	clear interrupt flah	*/
	SetBit(GIFR, EXTI_Config->Flag_clear);
 1fa:	2a b7       	in	r18, 0x3a	; 58
 1fc:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <__data_end>
 200:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <__data_end+0x1>
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	03 80       	ldd	r0, Z+3	; 0x03
 20a:	02 c0       	rjmp	.+4      	; 0x210 <__vector_2+0x38>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	0a 94       	dec	r0
 212:	e2 f7       	brpl	.-8      	; 0x20c <__vector_2+0x34>
 214:	82 2b       	or	r24, r18
 216:	8a bf       	out	0x3a, r24	; 58

	switch(traffic_light_state)
 218:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 21c:	8c 30       	cpi	r24, 0x0C	; 12
 21e:	31 f1       	breq	.+76     	; 0x26c <__vector_2+0x94>
	{
		default:
		
		traffic_light_state = green_state;
 220:	8a e0       	ldi	r24, 0x0A	; 10
 222:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		GREEN_LED(OFF);
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 12 03 	call	0x624	; 0x624 <GREEN_LED>
		YellowBlink();
 22c:	0e 94 6a 00 	call	0xd4	; 0xd4 <YellowBlink>
		LCD_Goto(2, 5);
 230:	65 e0       	ldi	r22, 0x05	; 5
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_Goto>
		LCD_WriteString((uint8_t*)"PEDESTRAIN");
 238:	82 e6       	ldi	r24, 0x62	; 98
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_WriteString>
		BLUE_LED(ON);
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	0e 94 22 03 	call	0x644	; 0x644 <BLUE_LED>
		RED_LED(ON);
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <RED_LED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24c:	2f ef       	ldi	r18, 0xFF	; 255
 24e:	83 e2       	ldi	r24, 0x23	; 35
 250:	94 ef       	ldi	r25, 0xF4	; 244
 252:	21 50       	subi	r18, 0x01	; 1
 254:	80 40       	sbci	r24, 0x00	; 0
 256:	90 40       	sbci	r25, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <__vector_2+0x7a>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <__vector_2+0x84>
 25c:	00 00       	nop
		_delay_ms(5000);
		BLUE_LED(OFF);
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	0e 94 22 03 	call	0x644	; 0x644 <BLUE_LED>
		RED_LED(OFF);
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <RED_LED>
		break;
 26a:	0f c0       	rjmp	.+30     	; 0x28a <__vector_2+0xb2>
		
		case red_state:
	
		traffic_light_state = green_state;
 26c:	8a e0       	ldi	r24, 0x0A	; 10
 26e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		BLUE_LED(ON);
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 22 03 	call	0x644	; 0x644 <BLUE_LED>
 278:	2f ef       	ldi	r18, 0xFF	; 255
 27a:	83 e2       	ldi	r24, 0x23	; 35
 27c:	94 ef       	ldi	r25, 0xF4	; 244
 27e:	21 50       	subi	r18, 0x01	; 1
 280:	80 40       	sbci	r24, 0x00	; 0
 282:	90 40       	sbci	r25, 0x00	; 0
 284:	e1 f7       	brne	.-8      	; 0x27e <__vector_2+0xa6>
 286:	00 c0       	rjmp	.+0      	; 0x288 <__vector_2+0xb0>
 288:	00 00       	nop
		_delay_ms(5000);
		break;
	}
		
	LCD_Goto(2, 5);
 28a:	65 e0       	ldi	r22, 0x05	; 5
 28c:	82 e0       	ldi	r24, 0x02	; 2
 28e:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_Goto>
	LCD_WriteString((uint8_t*)"CAR         ");
 292:	8d e6       	ldi	r24, 0x6D	; 109
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_WriteString>
	
	g_BREAK_DELAY = 0;	
 29a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <g_BREAK_DELAY>
}
 29e:	ff 91       	pop	r31
 2a0:	ef 91       	pop	r30
 2a2:	bf 91       	pop	r27
 2a4:	af 91       	pop	r26
 2a6:	9f 91       	pop	r25
 2a8:	8f 91       	pop	r24
 2aa:	7f 91       	pop	r23
 2ac:	6f 91       	pop	r22
 2ae:	5f 91       	pop	r21
 2b0:	4f 91       	pop	r20
 2b2:	3f 91       	pop	r19
 2b4:	2f 91       	pop	r18
 2b6:	0f 90       	pop	r0
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	0f 90       	pop	r0
 2bc:	1f 90       	pop	r1
 2be:	18 95       	reti

000002c0 <LCD_WriteCommand>:
void LCD_intgerToString(uint32_t data)
{
	uint8_t buff[16]; /* String to hold the ascii result */
	ltoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
	LCD_WriteString(buff); /* Display the string */
}
 2c0:	cf 93       	push	r28
 2c2:	c8 2f       	mov	r28, r24
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	63 e0       	ldi	r22, 0x03	; 3
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 2ce:	8f e9       	ldi	r24, 0x9F	; 159
 2d0:	9f e0       	ldi	r25, 0x0F	; 15
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <LCD_WriteCommand+0x12>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <LCD_WriteCommand+0x18>
 2d8:	00 00       	nop
 2da:	c4 fb       	bst	r28, 4
 2dc:	44 27       	eor	r20, r20
 2de:	40 f9       	bld	r20, 0
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 2e8:	c5 fb       	bst	r28, 5
 2ea:	44 27       	eor	r20, r20
 2ec:	40 f9       	bld	r20, 0
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 2f6:	c6 fb       	bst	r28, 6
 2f8:	44 27       	eor	r20, r20
 2fa:	40 f9       	bld	r20, 0
 2fc:	62 e0       	ldi	r22, 0x02	; 2
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 304:	4c 2f       	mov	r20, r28
 306:	44 1f       	adc	r20, r20
 308:	44 27       	eor	r20, r20
 30a:	44 1f       	adc	r20, r20
 30c:	64 e0       	ldi	r22, 0x04	; 4
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 314:	8f e9       	ldi	r24, 0x9F	; 159
 316:	9f e0       	ldi	r25, 0x0F	; 15
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <LCD_WriteCommand+0x58>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <LCD_WriteCommand+0x5e>
 31e:	00 00       	nop
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	62 e0       	ldi	r22, 0x02	; 2
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 32a:	8f e9       	ldi	r24, 0x9F	; 159
 32c:	9f e0       	ldi	r25, 0x0F	; 15
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <LCD_WriteCommand+0x6e>
 332:	00 c0       	rjmp	.+0      	; 0x334 <LCD_WriteCommand+0x74>
 334:	00 00       	nop
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	62 e0       	ldi	r22, 0x02	; 2
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 340:	8f e9       	ldi	r24, 0x9F	; 159
 342:	9f e0       	ldi	r25, 0x0F	; 15
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <LCD_WriteCommand+0x84>
 348:	00 c0       	rjmp	.+0      	; 0x34a <LCD_WriteCommand+0x8a>
 34a:	00 00       	nop
 34c:	4c 2f       	mov	r20, r28
 34e:	41 70       	andi	r20, 0x01	; 1
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 358:	c1 fb       	bst	r28, 1
 35a:	44 27       	eor	r20, r20
 35c:	40 f9       	bld	r20, 0
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 366:	c2 fb       	bst	r28, 2
 368:	44 27       	eor	r20, r20
 36a:	40 f9       	bld	r20, 0
 36c:	62 e0       	ldi	r22, 0x02	; 2
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 374:	c3 fb       	bst	r28, 3
 376:	44 27       	eor	r20, r20
 378:	40 f9       	bld	r20, 0
 37a:	64 e0       	ldi	r22, 0x04	; 4
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 382:	8f e9       	ldi	r24, 0x9F	; 159
 384:	9f e0       	ldi	r25, 0x0F	; 15
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <LCD_WriteCommand+0xc6>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <LCD_WriteCommand+0xcc>
 38c:	00 00       	nop
 38e:	41 e0       	ldi	r20, 0x01	; 1
 390:	62 e0       	ldi	r22, 0x02	; 2
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 398:	8f e9       	ldi	r24, 0x9F	; 159
 39a:	9f e0       	ldi	r25, 0x0F	; 15
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <LCD_WriteCommand+0xdc>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <LCD_WriteCommand+0xe2>
 3a2:	00 00       	nop
 3a4:	40 e0       	ldi	r20, 0x00	; 0
 3a6:	62 e0       	ldi	r22, 0x02	; 2
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 3ae:	8f e1       	ldi	r24, 0x1F	; 31
 3b0:	9e e4       	ldi	r25, 0x4E	; 78
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <LCD_WriteCommand+0xf2>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <LCD_WriteCommand+0xf8>
 3b8:	00 00       	nop
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <LCD_Init>:
 3be:	41 e0       	ldi	r20, 0x01	; 1
 3c0:	63 e0       	ldi	r22, 0x03	; 3
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_setPinDirection>
 3c8:	41 e0       	ldi	r20, 0x01	; 1
 3ca:	62 e0       	ldi	r22, 0x02	; 2
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_setPinDirection>
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_setPinDirection>
 3dc:	41 e0       	ldi	r20, 0x01	; 1
 3de:	61 e0       	ldi	r22, 0x01	; 1
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_setPinDirection>
 3e6:	41 e0       	ldi	r20, 0x01	; 1
 3e8:	62 e0       	ldi	r22, 0x02	; 2
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_setPinDirection>
 3f0:	41 e0       	ldi	r20, 0x01	; 1
 3f2:	64 e0       	ldi	r22, 0x04	; 4
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_setPinDirection>
 3fa:	8f e9       	ldi	r24, 0x9F	; 159
 3fc:	9f e0       	ldi	r25, 0x0F	; 15
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <LCD_Init+0x40>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 404:	00 00       	nop
 406:	88 e2       	ldi	r24, 0x28	; 40
 408:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_WriteCommand>
 40c:	8f e9       	ldi	r24, 0x9F	; 159
 40e:	9f e0       	ldi	r25, 0x0F	; 15
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 416:	00 00       	nop
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_WriteCommand>
 41e:	8f e9       	ldi	r24, 0x9F	; 159
 420:	9f e0       	ldi	r25, 0x0F	; 15
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 428:	00 00       	nop
 42a:	8c e0       	ldi	r24, 0x0C	; 12
 42c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_WriteCommand>
 430:	8f e9       	ldi	r24, 0x9F	; 159
 432:	9f e0       	ldi	r25, 0x0F	; 15
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 438:	00 c0       	rjmp	.+0      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 43a:	00 00       	nop
 43c:	08 95       	ret

0000043e <LCD_WriteChar>:
 43e:	cf 93       	push	r28
 440:	c8 2f       	mov	r28, r24
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	63 e0       	ldi	r22, 0x03	; 3
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 44c:	8f e9       	ldi	r24, 0x9F	; 159
 44e:	9f e0       	ldi	r25, 0x0F	; 15
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <LCD_WriteChar+0x12>
 454:	00 c0       	rjmp	.+0      	; 0x456 <LCD_WriteChar+0x18>
 456:	00 00       	nop
 458:	c4 fb       	bst	r28, 4
 45a:	44 27       	eor	r20, r20
 45c:	40 f9       	bld	r20, 0
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 466:	c5 fb       	bst	r28, 5
 468:	44 27       	eor	r20, r20
 46a:	40 f9       	bld	r20, 0
 46c:	61 e0       	ldi	r22, 0x01	; 1
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 474:	c6 fb       	bst	r28, 6
 476:	44 27       	eor	r20, r20
 478:	40 f9       	bld	r20, 0
 47a:	62 e0       	ldi	r22, 0x02	; 2
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 482:	4c 2f       	mov	r20, r28
 484:	44 1f       	adc	r20, r20
 486:	44 27       	eor	r20, r20
 488:	44 1f       	adc	r20, r20
 48a:	64 e0       	ldi	r22, 0x04	; 4
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 492:	8f e9       	ldi	r24, 0x9F	; 159
 494:	9f e0       	ldi	r25, 0x0F	; 15
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <LCD_WriteChar+0x58>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <LCD_WriteChar+0x5e>
 49c:	00 00       	nop
 49e:	41 e0       	ldi	r20, 0x01	; 1
 4a0:	62 e0       	ldi	r22, 0x02	; 2
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 4a8:	8f e9       	ldi	r24, 0x9F	; 159
 4aa:	9f e0       	ldi	r25, 0x0F	; 15
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <LCD_WriteChar+0x6e>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <LCD_WriteChar+0x74>
 4b2:	00 00       	nop
 4b4:	40 e0       	ldi	r20, 0x00	; 0
 4b6:	62 e0       	ldi	r22, 0x02	; 2
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 4be:	8f e9       	ldi	r24, 0x9F	; 159
 4c0:	9f e0       	ldi	r25, 0x0F	; 15
 4c2:	01 97       	sbiw	r24, 0x01	; 1
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <LCD_WriteChar+0x84>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <LCD_WriteChar+0x8a>
 4c8:	00 00       	nop
 4ca:	4c 2f       	mov	r20, r28
 4cc:	41 70       	andi	r20, 0x01	; 1
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 4d6:	c1 fb       	bst	r28, 1
 4d8:	44 27       	eor	r20, r20
 4da:	40 f9       	bld	r20, 0
 4dc:	61 e0       	ldi	r22, 0x01	; 1
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 4e4:	c2 fb       	bst	r28, 2
 4e6:	44 27       	eor	r20, r20
 4e8:	40 f9       	bld	r20, 0
 4ea:	62 e0       	ldi	r22, 0x02	; 2
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 4f2:	c3 fb       	bst	r28, 3
 4f4:	44 27       	eor	r20, r20
 4f6:	40 f9       	bld	r20, 0
 4f8:	64 e0       	ldi	r22, 0x04	; 4
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 500:	8f e9       	ldi	r24, 0x9F	; 159
 502:	9f e0       	ldi	r25, 0x0F	; 15
 504:	01 97       	sbiw	r24, 0x01	; 1
 506:	f1 f7       	brne	.-4      	; 0x504 <LCD_WriteChar+0xc6>
 508:	00 c0       	rjmp	.+0      	; 0x50a <LCD_WriteChar+0xcc>
 50a:	00 00       	nop
 50c:	41 e0       	ldi	r20, 0x01	; 1
 50e:	62 e0       	ldi	r22, 0x02	; 2
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 516:	8f e9       	ldi	r24, 0x9F	; 159
 518:	9f e0       	ldi	r25, 0x0F	; 15
 51a:	01 97       	sbiw	r24, 0x01	; 1
 51c:	f1 f7       	brne	.-4      	; 0x51a <LCD_WriteChar+0xdc>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <LCD_WriteChar+0xe2>
 520:	00 00       	nop
 522:	40 e0       	ldi	r20, 0x00	; 0
 524:	62 e0       	ldi	r22, 0x02	; 2
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 52c:	8f e1       	ldi	r24, 0x1F	; 31
 52e:	9e e4       	ldi	r25, 0x4E	; 78
 530:	01 97       	sbiw	r24, 0x01	; 1
 532:	f1 f7       	brne	.-4      	; 0x530 <LCD_WriteChar+0xf2>
 534:	00 c0       	rjmp	.+0      	; 0x536 <LCD_WriteChar+0xf8>
 536:	00 00       	nop
 538:	cf 91       	pop	r28
 53a:	08 95       	ret

0000053c <LCD_WriteString>:
 53c:	0f 93       	push	r16
 53e:	1f 93       	push	r17
 540:	cf 93       	push	r28
 542:	8c 01       	movw	r16, r24
 544:	c0 e0       	ldi	r28, 0x00	; 0
 546:	03 c0       	rjmp	.+6      	; 0x54e <LCD_WriteString+0x12>
 548:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_WriteChar>
 54c:	cf 5f       	subi	r28, 0xFF	; 255
 54e:	f8 01       	movw	r30, r16
 550:	ec 0f       	add	r30, r28
 552:	f1 1d       	adc	r31, r1
 554:	80 81       	ld	r24, Z
 556:	81 11       	cpse	r24, r1
 558:	f7 cf       	rjmp	.-18     	; 0x548 <LCD_WriteString+0xc>
 55a:	cf 91       	pop	r28
 55c:	1f 91       	pop	r17
 55e:	0f 91       	pop	r16
 560:	08 95       	ret

00000562 <LCD_Goto>:
void LCD_Goto(uint8_t line, uint8_t position)
{
uint8_t lcd_memory_address = 0;

/* Calculate the required address in the LCD DDRAM */
switch(line)
 562:	82 30       	cpi	r24, 0x02	; 2
 564:	51 f0       	breq	.+20     	; 0x57a <LCD_Goto+0x18>
 566:	18 f4       	brcc	.+6      	; 0x56e <LCD_Goto+0xc>
 568:	81 30       	cpi	r24, 0x01	; 1
 56a:	61 f0       	breq	.+24     	; 0x584 <LCD_Goto+0x22>
 56c:	04 c0       	rjmp	.+8      	; 0x576 <LCD_Goto+0x14>
 56e:	83 30       	cpi	r24, 0x03	; 3
 570:	31 f0       	breq	.+12     	; 0x57e <LCD_Goto+0x1c>
 572:	84 30       	cpi	r24, 0x04	; 4
 574:	31 f0       	breq	.+12     	; 0x582 <LCD_Goto+0x20>
	LCD_WriteString(buff); /* Display the string */
}

void LCD_Goto(uint8_t line, uint8_t position)
{
uint8_t lcd_memory_address = 0;
 576:	60 e0       	ldi	r22, 0x00	; 0
 578:	05 c0       	rjmp	.+10     	; 0x584 <LCD_Goto+0x22>
{
	case 1:
	lcd_memory_address=position;
	break;
	case 2:
	lcd_memory_address=position+0x40;
 57a:	60 5c       	subi	r22, 0xC0	; 192
	break;
 57c:	03 c0       	rjmp	.+6      	; 0x584 <LCD_Goto+0x22>
	case 3:
	lcd_memory_address=position+0x14;
 57e:	6c 5e       	subi	r22, 0xEC	; 236
	break;
 580:	01 c0       	rjmp	.+2      	; 0x584 <LCD_Goto+0x22>
	case 4:
	lcd_memory_address=position+0x54;
 582:	6c 5a       	subi	r22, 0xAC	; 172
	break;
}
/* Move the LCD cursor to this specific address */
LCD_WriteCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
 584:	86 2f       	mov	r24, r22
 586:	80 68       	ori	r24, 0x80	; 128
 588:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_WriteCommand>
 58c:	08 95       	ret

0000058e <LCD_Clear>:
}

void LCD_Clear(void)
{
    LCD_WriteCommand(0x01);
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_WriteCommand>
 594:	08 95       	ret

00000596 <LED_init>:
#include "LED.h"

void LED_init(){
	
	// Set All LEDs as Output
	DIO_setPinDirection(RED_PORT, RED_PIN, DIO_PIN_OUTPUT);
 596:	41 e0       	ldi	r20, 0x01	; 1
 598:	67 e0       	ldi	r22, 0x07	; 7
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_setPinDirection>
	DIO_setPinDirection(YELLOW_PORT, YELLOW_PIN, DIO_PIN_OUTPUT);
 5a0:	41 e0       	ldi	r20, 0x01	; 1
 5a2:	66 e0       	ldi	r22, 0x06	; 6
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_setPinDirection>
	DIO_setPinDirection(GREEN_PORT, GREEN_PIN, DIO_PIN_OUTPUT);
 5aa:	41 e0       	ldi	r20, 0x01	; 1
 5ac:	64 e0       	ldi	r22, 0x04	; 4
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_setPinDirection>
	DIO_setPinDirection(BLUE_PORT, BLUE_PIN, DIO_PIN_OUTPUT);
 5b4:	41 e0       	ldi	r20, 0x01	; 1
 5b6:	65 e0       	ldi	r22, 0x05	; 5
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_setPinDirection>
	
	// Turn OFF All LEDs
	DIO_WritePin(RED_PORT, RED_PIN, PIN_LOW);
 5be:	40 e0       	ldi	r20, 0x00	; 0
 5c0:	67 e0       	ldi	r22, 0x07	; 7
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
	DIO_WritePin(YELLOW_PORT, YELLOW_PIN, PIN_LOW);
 5c8:	40 e0       	ldi	r20, 0x00	; 0
 5ca:	66 e0       	ldi	r22, 0x06	; 6
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
	DIO_WritePin(GREEN_PORT, GREEN_PIN, PIN_LOW);
 5d2:	40 e0       	ldi	r20, 0x00	; 0
 5d4:	64 e0       	ldi	r22, 0x04	; 4
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
	DIO_WritePin(BLUE_PORT, BLUE_PIN, PIN_LOW);
 5dc:	40 e0       	ldi	r20, 0x00	; 0
 5de:	65 e0       	ldi	r22, 0x05	; 5
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 5e6:	08 95       	ret

000005e8 <RED_LED>:
}

void RED_LED(uint8_t state){
	switch (state)
 5e8:	88 23       	and	r24, r24
 5ea:	39 f0       	breq	.+14     	; 0x5fa <RED_LED+0x12>
 5ec:	81 30       	cpi	r24, 0x01	; 1
 5ee:	51 f4       	brne	.+20     	; 0x604 <RED_LED+0x1c>
	{
		case ON:
		DIO_WritePin(RED_PORT, RED_PIN, PIN_HIGH);
 5f0:	41 e0       	ldi	r20, 0x01	; 1
 5f2:	67 e0       	ldi	r22, 0x07	; 7
 5f4:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
		break;
 5f8:	08 95       	ret
		case OFF:
		DIO_WritePin(RED_PORT, RED_PIN, PIN_LOW);
 5fa:	40 e0       	ldi	r20, 0x00	; 0
 5fc:	67 e0       	ldi	r22, 0x07	; 7
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 604:	08 95       	ret

00000606 <YELLOW_LED>:
		break;
	}
}

void YELLOW_LED(uint8_t state){
	switch (state)
 606:	88 23       	and	r24, r24
 608:	39 f0       	breq	.+14     	; 0x618 <YELLOW_LED+0x12>
 60a:	81 30       	cpi	r24, 0x01	; 1
 60c:	51 f4       	brne	.+20     	; 0x622 <YELLOW_LED+0x1c>
	{
		case ON:
		ToggleBit(YELLOW_REGISTER, YELLOW_PIN);
 60e:	9b b3       	in	r25, 0x1b	; 27
 610:	80 e4       	ldi	r24, 0x40	; 64
 612:	89 27       	eor	r24, r25
 614:	8b bb       	out	0x1b, r24	; 27
		break;
 616:	08 95       	ret
		case OFF:
		DIO_WritePin(YELLOW_PORT, YELLOW_PIN, PIN_LOW);
 618:	40 e0       	ldi	r20, 0x00	; 0
 61a:	66 e0       	ldi	r22, 0x06	; 6
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 622:	08 95       	ret

00000624 <GREEN_LED>:
		break;
	}
}

void GREEN_LED(uint8_t state){
	switch (state)
 624:	88 23       	and	r24, r24
 626:	41 f0       	breq	.+16     	; 0x638 <GREEN_LED+0x14>
 628:	81 30       	cpi	r24, 0x01	; 1
 62a:	59 f4       	brne	.+22     	; 0x642 <GREEN_LED+0x1e>
	{
		case ON:
		DIO_WritePin(GREEN_PORT, GREEN_PIN, PIN_HIGH);
 62c:	41 e0       	ldi	r20, 0x01	; 1
 62e:	64 e0       	ldi	r22, 0x04	; 4
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
		break;
 636:	08 95       	ret
		case OFF:
		DIO_WritePin(GREEN_PORT, GREEN_PIN, PIN_LOW);
 638:	40 e0       	ldi	r20, 0x00	; 0
 63a:	64 e0       	ldi	r22, 0x04	; 4
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 642:	08 95       	ret

00000644 <BLUE_LED>:
		break;
	}
}

void BLUE_LED(uint8_t state){
	switch (state)
 644:	88 23       	and	r24, r24
 646:	41 f0       	breq	.+16     	; 0x658 <BLUE_LED+0x14>
 648:	81 30       	cpi	r24, 0x01	; 1
 64a:	59 f4       	brne	.+22     	; 0x662 <BLUE_LED+0x1e>
	{
		case ON:
		DIO_WritePin(BLUE_PORT, BLUE_PIN, PIN_HIGH);
 64c:	41 e0       	ldi	r20, 0x01	; 1
 64e:	65 e0       	ldi	r22, 0x05	; 5
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
		break;
 656:	08 95       	ret
		case OFF:
		DIO_WritePin(BLUE_PORT, BLUE_PIN, PIN_LOW);
 658:	40 e0       	ldi	r20, 0x00	; 0
 65a:	65 e0       	ldi	r22, 0x05	; 5
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	0e 94 b7 03 	call	0x76e	; 0x76e <DIO_WritePin>
 662:	08 95       	ret

00000664 <main>:
#include "APP.h"

int main(void)
{
	
	LED_init();
 664:	0e 94 cb 02 	call	0x596	; 0x596 <LED_init>
	LCD_Init();
 668:	0e 94 df 01 	call	0x3be	; 0x3be <LCD_Init>
	LCD_Clear();
 66c:	0e 94 c7 02 	call	0x58e	; 0x58e <LCD_Clear>
	LCD_Goto(2, 5);
 670:	65 e0       	ldi	r22, 0x05	; 5
 672:	82 e0       	ldi	r24, 0x02	; 2
 674:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_Goto>
	LCD_WriteString((uint8_t*)"CARS        ");
 678:	8a e7       	ldi	r24, 0x7A	; 122
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_WriteString>

	PedestrianButton_init();	
 680:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <PedestrianButton_init>
	
	Traffic_state();
 684:	0e 94 80 00 	call	0x100	; 0x100 <Traffic_state>
}
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	08 95       	ret

0000068e <DIO_setPinDirection>:
	}
}

void DIO_setPinDirection(uint8_t Port, uint8_t pin, uint8_t dir)
{
	if( dir == DIO_PIN_OUTPUT)
 68e:	41 30       	cpi	r20, 0x01	; 1
 690:	a1 f5       	brne	.+104    	; 0x6fa <DIO_setPinDirection+0x6c>
	{
		switch(Port)
 692:	81 30       	cpi	r24, 0x01	; 1
 694:	89 f0       	breq	.+34     	; 0x6b8 <DIO_setPinDirection+0x2a>
 696:	28 f0       	brcs	.+10     	; 0x6a2 <DIO_setPinDirection+0x14>
 698:	82 30       	cpi	r24, 0x02	; 2
 69a:	c9 f0       	breq	.+50     	; 0x6ce <DIO_setPinDirection+0x40>
 69c:	83 30       	cpi	r24, 0x03	; 3
 69e:	11 f1       	breq	.+68     	; 0x6e4 <DIO_setPinDirection+0x56>
 6a0:	08 95       	ret
		{
			case DIO_PORTA:
			SetBit(DDRA, pin);
 6a2:	2a b3       	in	r18, 0x1a	; 26
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <DIO_setPinDirection+0x20>
 6aa:	88 0f       	add	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	6a 95       	dec	r22
 6b0:	e2 f7       	brpl	.-8      	; 0x6aa <DIO_setPinDirection+0x1c>
 6b2:	82 2b       	or	r24, r18
 6b4:	8a bb       	out	0x1a, r24	; 26
			break;
 6b6:	08 95       	ret
			
			case DIO_PORTB:
			SetBit(DDRB, pin);
 6b8:	27 b3       	in	r18, 0x17	; 23
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <DIO_setPinDirection+0x36>
 6c0:	88 0f       	add	r24, r24
 6c2:	99 1f       	adc	r25, r25
 6c4:	6a 95       	dec	r22
 6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <DIO_setPinDirection+0x32>
 6c8:	82 2b       	or	r24, r18
 6ca:	87 bb       	out	0x17, r24	; 23
			break;
 6cc:	08 95       	ret
			
			case DIO_PORTC:
			SetBit(DDRC, pin);
 6ce:	24 b3       	in	r18, 0x14	; 20
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <DIO_setPinDirection+0x4c>
 6d6:	88 0f       	add	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	6a 95       	dec	r22
 6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <DIO_setPinDirection+0x48>
 6de:	82 2b       	or	r24, r18
 6e0:	84 bb       	out	0x14, r24	; 20
			break;
 6e2:	08 95       	ret
			
			case DIO_PORTD:
			SetBit(DDRD, pin);
 6e4:	21 b3       	in	r18, 0x11	; 17
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <DIO_setPinDirection+0x62>
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	6a 95       	dec	r22
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <DIO_setPinDirection+0x5e>
 6f4:	82 2b       	or	r24, r18
 6f6:	81 bb       	out	0x11, r24	; 17
			break;
 6f8:	08 95       	ret
			default:
			/*do nothing*/
			break;
		}
	}
	else if(dir == DIO_PIN_INPUT)
 6fa:	41 11       	cpse	r20, r1
 6fc:	37 c0       	rjmp	.+110    	; 0x76c <DIO_setPinDirection+0xde>
	{
		switch(Port)
 6fe:	81 30       	cpi	r24, 0x01	; 1
 700:	91 f0       	breq	.+36     	; 0x726 <DIO_setPinDirection+0x98>
 702:	28 f0       	brcs	.+10     	; 0x70e <DIO_setPinDirection+0x80>
 704:	82 30       	cpi	r24, 0x02	; 2
 706:	d9 f0       	breq	.+54     	; 0x73e <DIO_setPinDirection+0xb0>
 708:	83 30       	cpi	r24, 0x03	; 3
 70a:	29 f1       	breq	.+74     	; 0x756 <DIO_setPinDirection+0xc8>
 70c:	08 95       	ret
		{
			case DIO_PORTA:
			ClearBit(DDRA, pin);
 70e:	2a b3       	in	r18, 0x1a	; 26
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	02 c0       	rjmp	.+4      	; 0x71a <DIO_setPinDirection+0x8c>
 716:	88 0f       	add	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	6a 95       	dec	r22
 71c:	e2 f7       	brpl	.-8      	; 0x716 <DIO_setPinDirection+0x88>
 71e:	80 95       	com	r24
 720:	82 23       	and	r24, r18
 722:	8a bb       	out	0x1a, r24	; 26
			break;
 724:	08 95       	ret
			
			case DIO_PORTB:
			ClearBit(DDRB, pin);
 726:	27 b3       	in	r18, 0x17	; 23
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	02 c0       	rjmp	.+4      	; 0x732 <DIO_setPinDirection+0xa4>
 72e:	88 0f       	add	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	6a 95       	dec	r22
 734:	e2 f7       	brpl	.-8      	; 0x72e <DIO_setPinDirection+0xa0>
 736:	80 95       	com	r24
 738:	82 23       	and	r24, r18
 73a:	87 bb       	out	0x17, r24	; 23
			break;
 73c:	08 95       	ret
			
			case DIO_PORTC:
			ClearBit(DDRC, pin);
 73e:	24 b3       	in	r18, 0x14	; 20
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	02 c0       	rjmp	.+4      	; 0x74a <DIO_setPinDirection+0xbc>
 746:	88 0f       	add	r24, r24
 748:	99 1f       	adc	r25, r25
 74a:	6a 95       	dec	r22
 74c:	e2 f7       	brpl	.-8      	; 0x746 <DIO_setPinDirection+0xb8>
 74e:	80 95       	com	r24
 750:	82 23       	and	r24, r18
 752:	84 bb       	out	0x14, r24	; 20
			break;
 754:	08 95       	ret
			
			case DIO_PORTD:
			ClearBit(DDRD, pin);
 756:	21 b3       	in	r18, 0x11	; 17
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	02 c0       	rjmp	.+4      	; 0x762 <DIO_setPinDirection+0xd4>
 75e:	88 0f       	add	r24, r24
 760:	99 1f       	adc	r25, r25
 762:	6a 95       	dec	r22
 764:	e2 f7       	brpl	.-8      	; 0x75e <DIO_setPinDirection+0xd0>
 766:	80 95       	com	r24
 768:	82 23       	and	r24, r18
 76a:	81 bb       	out	0x11, r24	; 17
 76c:	08 95       	ret

0000076e <DIO_WritePin>:
	}
}

void DIO_WritePin(uint8_t Port, uint8_t pin, uint8_t val)
{
	if(val)
 76e:	44 23       	and	r20, r20
 770:	a1 f1       	breq	.+104    	; 0x7da <DIO_WritePin+0x6c>
	{
		switch(Port)
 772:	81 30       	cpi	r24, 0x01	; 1
 774:	89 f0       	breq	.+34     	; 0x798 <DIO_WritePin+0x2a>
 776:	28 f0       	brcs	.+10     	; 0x782 <DIO_WritePin+0x14>
 778:	82 30       	cpi	r24, 0x02	; 2
 77a:	c9 f0       	breq	.+50     	; 0x7ae <DIO_WritePin+0x40>
 77c:	83 30       	cpi	r24, 0x03	; 3
 77e:	11 f1       	breq	.+68     	; 0x7c4 <DIO_WritePin+0x56>
 780:	08 95       	ret
		{
			case DIO_PORTA:
			SetBit(PORTA, pin);
 782:	2b b3       	in	r18, 0x1b	; 27
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	02 c0       	rjmp	.+4      	; 0x78e <DIO_WritePin+0x20>
 78a:	88 0f       	add	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	6a 95       	dec	r22
 790:	e2 f7       	brpl	.-8      	; 0x78a <DIO_WritePin+0x1c>
 792:	82 2b       	or	r24, r18
 794:	8b bb       	out	0x1b, r24	; 27
			break;
 796:	08 95       	ret
		
			case DIO_PORTB:
			SetBit(PORTB, pin);
 798:	28 b3       	in	r18, 0x18	; 24
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <DIO_WritePin+0x36>
 7a0:	88 0f       	add	r24, r24
 7a2:	99 1f       	adc	r25, r25
 7a4:	6a 95       	dec	r22
 7a6:	e2 f7       	brpl	.-8      	; 0x7a0 <DIO_WritePin+0x32>
 7a8:	82 2b       	or	r24, r18
 7aa:	88 bb       	out	0x18, r24	; 24
			break;
 7ac:	08 95       	ret
		
			case DIO_PORTC:
			SetBit(PORTC, pin);
 7ae:	25 b3       	in	r18, 0x15	; 21
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <DIO_WritePin+0x4c>
 7b6:	88 0f       	add	r24, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	6a 95       	dec	r22
 7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <DIO_WritePin+0x48>
 7be:	82 2b       	or	r24, r18
 7c0:	85 bb       	out	0x15, r24	; 21
			break;
 7c2:	08 95       	ret
		
			case DIO_PORTD:
			SetBit(PORTD, pin);
 7c4:	22 b3       	in	r18, 0x12	; 18
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <DIO_WritePin+0x62>
 7cc:	88 0f       	add	r24, r24
 7ce:	99 1f       	adc	r25, r25
 7d0:	6a 95       	dec	r22
 7d2:	e2 f7       	brpl	.-8      	; 0x7cc <DIO_WritePin+0x5e>
 7d4:	82 2b       	or	r24, r18
 7d6:	82 bb       	out	0x12, r24	; 18
			break;
 7d8:	08 95       	ret
			break;
		}
	}
	else
	{
		switch(Port)
 7da:	81 30       	cpi	r24, 0x01	; 1
 7dc:	91 f0       	breq	.+36     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7de:	28 f0       	brcs	.+10     	; 0x7ea <DIO_WritePin+0x7c>
 7e0:	82 30       	cpi	r24, 0x02	; 2
 7e2:	d9 f0       	breq	.+54     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7e4:	83 30       	cpi	r24, 0x03	; 3
 7e6:	29 f1       	breq	.+74     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 7e8:	08 95       	ret
		{
			case DIO_PORTA:
			ClearBit(PORTA, pin);
 7ea:	2b b3       	in	r18, 0x1b	; 27
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <DIO_WritePin+0x88>
 7f2:	88 0f       	add	r24, r24
 7f4:	99 1f       	adc	r25, r25
 7f6:	6a 95       	dec	r22
 7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <DIO_WritePin+0x84>
 7fa:	80 95       	com	r24
 7fc:	82 23       	and	r24, r18
 7fe:	8b bb       	out	0x1b, r24	; 27
			break;
 800:	08 95       	ret
			
			case DIO_PORTB:
			ClearBit(PORTB, pin);
 802:	28 b3       	in	r18, 0x18	; 24
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	02 c0       	rjmp	.+4      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80a:	88 0f       	add	r24, r24
 80c:	99 1f       	adc	r25, r25
 80e:	6a 95       	dec	r22
 810:	e2 f7       	brpl	.-8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 812:	80 95       	com	r24
 814:	82 23       	and	r24, r18
 816:	88 bb       	out	0x18, r24	; 24
			break;
 818:	08 95       	ret
			
			case DIO_PORTC:
			ClearBit(PORTC, pin);
 81a:	25 b3       	in	r18, 0x15	; 21
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	02 c0       	rjmp	.+4      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 822:	88 0f       	add	r24, r24
 824:	99 1f       	adc	r25, r25
 826:	6a 95       	dec	r22
 828:	e2 f7       	brpl	.-8      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 82a:	80 95       	com	r24
 82c:	82 23       	and	r24, r18
 82e:	85 bb       	out	0x15, r24	; 21
			break;
 830:	08 95       	ret
			
			case DIO_PORTD:
			ClearBit(PORTD, pin);
 832:	22 b3       	in	r18, 0x12	; 18
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	02 c0       	rjmp	.+4      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 83a:	88 0f       	add	r24, r24
 83c:	99 1f       	adc	r25, r25
 83e:	6a 95       	dec	r22
 840:	e2 f7       	brpl	.-8      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 842:	80 95       	com	r24
 844:	82 23       	and	r24, r18
 846:	82 bb       	out	0x12, r24	; 18
 848:	08 95       	ret

0000084a <EXTI_GlobalSet>:


void EXTI_GlobalSet()
{
	#if	GLOBAL_INTERRUPT == GLOBAL_INTERRUPT_ENABLE
		SetBit(SREG, 7);
 84a:	8f b7       	in	r24, 0x3f	; 63
 84c:	80 68       	ori	r24, 0x80	; 128
 84e:	8f bf       	out	0x3f, r24	; 63
 850:	08 95       	ret

00000852 <EXTI_interruptconfig>:
		ClearBit(SREG, 7);
	#endif
}

void EXTI_interruptconfig(EXTi_INTERRUPTconfiguration *config_struct)
{
 852:	cf 93       	push	r28
 854:	df 93       	push	r29
 856:	ec 01       	movw	r28, r24
	/*	enable gloabl interrupts	*/
	EXTI_GlobalSet();
 858:	0e 94 25 04 	call	0x84a	; 0x84a <EXTI_GlobalSet>
	
		/*	enable external interrupt request	*/
		SetBit(GICR, config_struct->IRQ_en);
 85c:	2b b7       	in	r18, 0x3b	; 59
 85e:	81 e0       	ldi	r24, 0x01	; 1
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	0a 80       	ldd	r0, Y+2	; 0x02
 864:	02 c0       	rjmp	.+4      	; 0x86a <__stack+0xb>
 866:	88 0f       	add	r24, r24
 868:	99 1f       	adc	r25, r25
 86a:	0a 94       	dec	r0
 86c:	e2 f7       	brpl	.-8      	; 0x866 <__stack+0x7>
 86e:	82 2b       	or	r24, r18
 870:	8b bf       	out	0x3b, r24	; 59
		
		switch(config_struct->EXTI_source)
 872:	88 81       	ld	r24, Y
 874:	81 30       	cpi	r24, 0x01	; 1
 876:	49 f0       	breq	.+18     	; 0x88a <__stack+0x2b>
 878:	18 f0       	brcs	.+6      	; 0x880 <__stack+0x21>
 87a:	82 30       	cpi	r24, 0x02	; 2
 87c:	89 f0       	breq	.+34     	; 0x8a0 <__stack+0x41>
 87e:	1a c0       	rjmp	.+52     	; 0x8b4 <__stack+0x55>
		{
		/*	external interrupts trigger control	*/
		case EX_INT0:
			MCUCR |= config_struct->EXTI_trigger;
 880:	95 b7       	in	r25, 0x35	; 53
 882:	89 81       	ldd	r24, Y+1	; 0x01
 884:	89 2b       	or	r24, r25
 886:	85 bf       	out	0x35, r24	; 53
			break;
 888:	15 c0       	rjmp	.+42     	; 0x8b4 <__stack+0x55>
			
		case EX_INT1:
			MCUCR |= config_struct->EXTI_trigger << 2;
 88a:	25 b7       	in	r18, 0x35	; 53
 88c:	99 81       	ldd	r25, Y+1	; 0x01
 88e:	89 2f       	mov	r24, r25
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	88 0f       	add	r24, r24
 894:	99 1f       	adc	r25, r25
 896:	88 0f       	add	r24, r24
 898:	99 1f       	adc	r25, r25
 89a:	82 2b       	or	r24, r18
 89c:	85 bf       	out	0x35, r24	; 53
			break;
 89e:	0a c0       	rjmp	.+20     	; 0x8b4 <__stack+0x55>
			
		case EX_INT2:
			if(config_struct->EXTI_trigger == FALLING_EDGE)
 8a0:	89 81       	ldd	r24, Y+1	; 0x01
 8a2:	82 30       	cpi	r24, 0x02	; 2
 8a4:	21 f4       	brne	.+8      	; 0x8ae <__stack+0x4f>
				ClearBit(MCUCSR, 6);
 8a6:	84 b7       	in	r24, 0x34	; 52
 8a8:	8f 7b       	andi	r24, 0xBF	; 191
 8aa:	84 bf       	out	0x34, r24	; 52
 8ac:	03 c0       	rjmp	.+6      	; 0x8b4 <__stack+0x55>
			else
				SetBit(MCUCSR, 6);
 8ae:	84 b7       	in	r24, 0x34	; 52
 8b0:	80 64       	ori	r24, 0x40	; 64
 8b2:	84 bf       	out	0x34, r24	; 52
		}
	
 8b4:	df 91       	pop	r29
 8b6:	cf 91       	pop	r28
 8b8:	08 95       	ret

000008ba <_exit>:
 8ba:	f8 94       	cli

000008bc <__stop_program>:
 8bc:	ff cf       	rjmp	.-2      	; 0x8bc <__stop_program>
