
Traffic_control_lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000878  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000878  0000090c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800074  00800074  00000920  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000950  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d05  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b86  00000000  00000000  00002801  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ed5  00000000  00000000  00003387  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  0000425c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000606  00000000  00000000  00004528  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d84  00000000  00000000  00004b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000058b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 14 03 	call	0x628	; 0x628 <main>
  8a:	0c 94 3a 04 	jmp	0x874	; 0x874 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <delay_5secs>:
#include "APP.h"

uint8_t g_BREAK_DELAY = 1; 

void delay_5secs(uint32_t delay)
{
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	6b 01       	movw	r12, r22
  9c:	7c 01       	movw	r14, r24
	   for (uint16_t i = 0; i < delay; i++) {
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0b c0       	rjmp	.+22     	; 0xba <delay_5secs+0x28>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	ef e9       	ldi	r30, 0x9F	; 159
  a6:	ff e0       	ldi	r31, 0x0F	; 15
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <delay_5secs+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <delay_5secs+0x1c>
  ae:	00 00       	nop
		   // Each iteration of this loop introduces a delay of about 1ms using _delay_us
		   _delay_us(1000);  // Delay for 1000 microseconds (1ms)
		   if(!g_BREAK_DELAY)
  b0:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b4:	22 23       	and	r18, r18
  b6:	49 f0       	breq	.+18     	; 0xca <delay_5secs+0x38>

uint8_t g_BREAK_DELAY = 1; 

void delay_5secs(uint32_t delay)
{
	   for (uint16_t i = 0; i < delay; i++) {
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	ac 01       	movw	r20, r24
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	4c 15       	cp	r20, r12
  c2:	5d 05       	cpc	r21, r13
  c4:	6e 05       	cpc	r22, r14
  c6:	7f 05       	cpc	r23, r15
  c8:	68 f3       	brcs	.-38     	; 0xa4 <delay_5secs+0x12>
		   // Each iteration of this loop introduces a delay of about 1ms using _delay_us
		   _delay_us(1000);  // Delay for 1000 microseconds (1ms)
		   if(!g_BREAK_DELAY)
				break;
	   }
}
  ca:	ff 90       	pop	r15
  cc:	ef 90       	pop	r14
  ce:	df 90       	pop	r13
  d0:	cf 90       	pop	r12
  d2:	08 95       	ret

000000d4 <YellowBlink>:

void YellowBlink(){
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
	int count = 5;
  d8:	c5 e0       	ldi	r28, 0x05	; 5
  da:	d0 e0       	ldi	r29, 0x00	; 0
	while(--count){
  dc:	09 c0       	rjmp	.+18     	; 0xf0 <YellowBlink+0x1c>
		YELLOW_LED(ON);
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 e5 02 	call	0x5ca	; 0x5ca <YELLOW_LED>
		delay_5secs(1000);
  e4:	68 ee       	ldi	r22, 0xE8	; 232
  e6:	73 e0       	ldi	r23, 0x03	; 3
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 49 00 	call	0x92	; 0x92 <delay_5secs>
	   }
}

void YellowBlink(){
	int count = 5;
	while(--count){
  f0:	21 97       	sbiw	r28, 0x01	; 1
  f2:	a9 f7       	brne	.-22     	; 0xde <YellowBlink+0xa>
		YELLOW_LED(ON);
		delay_5secs(1000);
	}
	YELLOW_LED(OFF);
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 e5 02 	call	0x5ca	; 0x5ca <YELLOW_LED>
}
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <Traffic_state>:

void Traffic_state(uint8_t *tr_state)
{
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	ec 01       	movw	r28, r24
	switch(*tr_state)
 106:	88 81       	ld	r24, Y
 108:	8b 30       	cpi	r24, 0x0B	; 11
 10a:	31 f1       	breq	.+76     	; 0x158 <Traffic_state+0x58>
 10c:	8c 30       	cpi	r24, 0x0C	; 12
 10e:	a9 f1       	breq	.+106    	; 0x17a <Traffic_state+0x7a>
 110:	8a 30       	cpi	r24, 0x0A	; 10
 112:	09 f0       	breq	.+2      	; 0x116 <Traffic_state+0x16>
 114:	45 c0       	rjmp	.+138    	; 0x1a0 <Traffic_state+0xa0>
	{
		case green_state:
		LCD_Clear();
 116:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_Clear>
		LCD_WriteString("	CAR");
 11a:	82 e6       	ldi	r24, 0x62	; 98
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_WriteString>
		g_BREAK_DELAY = 1;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		GREEN_LED(ON);
 128:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <GREEN_LED>
		delay_5secs(FIVE_SEC);
 12c:	68 e8       	ldi	r22, 0x88	; 136
 12e:	73 e1       	ldi	r23, 0x13	; 19
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 49 00 	call	0x92	; 0x92 <delay_5secs>
		GREEN_LED(OFF);
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <GREEN_LED>
		BLUE_LED(OFF);
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 04 03 	call	0x608	; 0x608 <BLUE_LED>
		if(g_BREAK_DELAY)
 144:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 148:	88 23       	and	r24, r24
 14a:	19 f0       	breq	.+6      	; 0x152 <Traffic_state+0x52>
			*tr_state = yellow_state;
 14c:	8b e0       	ldi	r24, 0x0B	; 11
 14e:	88 83       	st	Y, r24
 150:	27 c0       	rjmp	.+78     	; 0x1a0 <Traffic_state+0xa0>
		else
		*tr_state = green_state;
 152:	8a e0       	ldi	r24, 0x0A	; 10
 154:	88 83       	st	Y, r24
 156:	24 c0       	rjmp	.+72     	; 0x1a0 <Traffic_state+0xa0>
		break;
		
		case yellow_state:
		g_BREAK_DELAY = 1;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		YellowBlink();
 15e:	0e 94 6a 00 	call	0xd4	; 0xd4 <YellowBlink>
		BLUE_LED(OFF);
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 04 03 	call	0x608	; 0x608 <BLUE_LED>
		if(*tr_state == yellow_state)
 168:	88 81       	ld	r24, Y
 16a:	8b 30       	cpi	r24, 0x0B	; 11
 16c:	19 f4       	brne	.+6      	; 0x174 <Traffic_state+0x74>
			*tr_state = red_state;
 16e:	8c e0       	ldi	r24, 0x0C	; 12
 170:	88 83       	st	Y, r24
 172:	16 c0       	rjmp	.+44     	; 0x1a0 <Traffic_state+0xa0>
		else
			*tr_state = green_state;
 174:	8a e0       	ldi	r24, 0x0A	; 10
 176:	88 83       	st	Y, r24
 178:	13 c0       	rjmp	.+38     	; 0x1a0 <Traffic_state+0xa0>
		break;
		
		case red_state:
		g_BREAK_DELAY = 1;
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		RED_LED(ON);
 180:	0e 94 d6 02 	call	0x5ac	; 0x5ac <RED_LED>
		delay_5secs(FIVE_SEC);
 184:	68 e8       	ldi	r22, 0x88	; 136
 186:	73 e1       	ldi	r23, 0x13	; 19
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 49 00 	call	0x92	; 0x92 <delay_5secs>
		RED_LED(OFF);
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 d6 02 	call	0x5ac	; 0x5ac <RED_LED>
		BLUE_LED(OFF);
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	0e 94 04 03 	call	0x608	; 0x608 <BLUE_LED>
		*tr_state = green_state;
 19c:	8a e0       	ldi	r24, 0x0A	; 10
 19e:	88 83       	st	Y, r24
		break;
	}
		
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <PedestrianButton_init>:
EXTi_INTERRUPTconfiguration *EXTI_Config;
extern uint8_t g_BREAK_DELAY;
extern uint8_t state;

void PedestrianButton_init(){
	DIO_setPinDirection(PEDESTRIAN_PORT, PEDESTRIAN_PIN, DIO_PIN_INPUT);
 1a6:	40 e0       	ldi	r20, 0x00	; 0
 1a8:	63 e0       	ldi	r22, 0x03	; 3
 1aa:	83 e0       	ldi	r24, 0x03	; 3
 1ac:	0e 94 24 03 	call	0x648	; 0x648 <DIO_setPinDirection>
	
	EXTI_Config->EXTI_source = EX_INT1;
 1b0:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <__data_end>
 1b4:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <__data_end+0x1>
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 83       	st	Z, r24
	EXTI_Config->EXTI_trigger = ANY_LOGIC_CHANGE;
 1bc:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <__data_end>
 1c0:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <__data_end+0x1>
 1c4:	81 83       	std	Z+1, r24	; 0x01
	EXTI_Config->IRQ_en = GLOBAL_INT1_EN;
 1c6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 1ca:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 1ce:	27 e0       	ldi	r18, 0x07	; 7
 1d0:	fc 01       	movw	r30, r24
 1d2:	22 83       	std	Z+2, r18	; 0x02
	EXTI_Config->Flag_clear = GLOBAL_INT1_FLAG;
 1d4:	23 83       	std	Z+3, r18	; 0x03
	
	EXTI_interruptconfig(EXTI_Config);
 1d6:	0e 94 06 04 	call	0x80c	; 0x80c <EXTI_interruptconfig>
 1da:	08 95       	ret

000001dc <__vector_2>:
}

ISR(INT1_vect){
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
 1e6:	2f 93       	push	r18
 1e8:	3f 93       	push	r19
 1ea:	4f 93       	push	r20
 1ec:	5f 93       	push	r21
 1ee:	6f 93       	push	r22
 1f0:	7f 93       	push	r23
 1f2:	8f 93       	push	r24
 1f4:	9f 93       	push	r25
 1f6:	af 93       	push	r26
 1f8:	bf 93       	push	r27
 1fa:	ef 93       	push	r30
 1fc:	ff 93       	push	r31
	
	switch(state)
 1fe:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <state>
 202:	8c 30       	cpi	r24, 0x0C	; 12
 204:	21 f1       	breq	.+72     	; 0x24e <__vector_2+0x72>
	{
		default:
		
		state = green_state;
 206:	8a e0       	ldi	r24, 0x0A	; 10
 208:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <state>
		GREEN_LED(OFF);
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <GREEN_LED>
		YellowBlink();
 212:	0e 94 6a 00 	call	0xd4	; 0xd4 <YellowBlink>
		LCD_Clear();
 216:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_Clear>
		LCD_WriteString("	PEDESTRIAN");
 21a:	87 e6       	ldi	r24, 0x67	; 103
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_WriteString>
		BLUE_LED(ON);
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 04 03 	call	0x608	; 0x608 <BLUE_LED>
		RED_LED(ON);
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <RED_LED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22e:	2f ef       	ldi	r18, 0xFF	; 255
 230:	83 e2       	ldi	r24, 0x23	; 35
 232:	94 ef       	ldi	r25, 0xF4	; 244
 234:	21 50       	subi	r18, 0x01	; 1
 236:	80 40       	sbci	r24, 0x00	; 0
 238:	90 40       	sbci	r25, 0x00	; 0
 23a:	e1 f7       	brne	.-8      	; 0x234 <__vector_2+0x58>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <__vector_2+0x62>
 23e:	00 00       	nop
		_delay_ms(5000);
		BLUE_LED(OFF);
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	0e 94 04 03 	call	0x608	; 0x608 <BLUE_LED>
		RED_LED(OFF);
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 d6 02 	call	0x5ac	; 0x5ac <RED_LED>
		break;
 24c:	0f c0       	rjmp	.+30     	; 0x26c <__vector_2+0x90>
		
		case red_state:
		
		state = green_state;
 24e:	8a e0       	ldi	r24, 0x0A	; 10
 250:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <state>
		BLUE_LED(ON);
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	0e 94 04 03 	call	0x608	; 0x608 <BLUE_LED>
 25a:	2f ef       	ldi	r18, 0xFF	; 255
 25c:	83 e2       	ldi	r24, 0x23	; 35
 25e:	94 ef       	ldi	r25, 0xF4	; 244
 260:	21 50       	subi	r18, 0x01	; 1
 262:	80 40       	sbci	r24, 0x00	; 0
 264:	90 40       	sbci	r25, 0x00	; 0
 266:	e1 f7       	brne	.-8      	; 0x260 <__vector_2+0x84>
 268:	00 c0       	rjmp	.+0      	; 0x26a <__vector_2+0x8e>
 26a:	00 00       	nop
		_delay_ms(5000);
		break;
	}
	
		g_BREAK_DELAY = 0;
 26c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		
	SetBit(GIFR, EXTI_Config->Flag_clear);
 270:	2a b7       	in	r18, 0x3a	; 58
 272:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <__data_end>
 276:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <__data_end+0x1>
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	03 80       	ldd	r0, Z+3	; 0x03
 280:	02 c0       	rjmp	.+4      	; 0x286 <__vector_2+0xaa>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	0a 94       	dec	r0
 288:	e2 f7       	brpl	.-8      	; 0x282 <__vector_2+0xa6>
 28a:	82 2b       	or	r24, r18
 28c:	8a bf       	out	0x3a, r24	; 58
	
}
 28e:	ff 91       	pop	r31
 290:	ef 91       	pop	r30
 292:	bf 91       	pop	r27
 294:	af 91       	pop	r26
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	7f 91       	pop	r23
 29c:	6f 91       	pop	r22
 29e:	5f 91       	pop	r21
 2a0:	4f 91       	pop	r20
 2a2:	3f 91       	pop	r19
 2a4:	2f 91       	pop	r18
 2a6:	0f 90       	pop	r0
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	0f 90       	pop	r0
 2ac:	1f 90       	pop	r1
 2ae:	18 95       	reti

000002b0 <LCD_WriteCommand>:
{
uint8_t pos[2] = {0x80 , 0xC0};

LCD_WriteCommand(pos[row]+col);

}
 2b0:	cf 93       	push	r28
 2b2:	c8 2f       	mov	r28, r24
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	63 e0       	ldi	r22, 0x03	; 3
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 2be:	8f e9       	ldi	r24, 0x9F	; 159
 2c0:	9f e0       	ldi	r25, 0x0F	; 15
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCD_WriteCommand+0x12>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCD_WriteCommand+0x18>
 2c8:	00 00       	nop
 2ca:	c4 fb       	bst	r28, 4
 2cc:	44 27       	eor	r20, r20
 2ce:	40 f9       	bld	r20, 0
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 2d8:	c5 fb       	bst	r28, 5
 2da:	44 27       	eor	r20, r20
 2dc:	40 f9       	bld	r20, 0
 2de:	61 e0       	ldi	r22, 0x01	; 1
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 2e6:	c6 fb       	bst	r28, 6
 2e8:	44 27       	eor	r20, r20
 2ea:	40 f9       	bld	r20, 0
 2ec:	62 e0       	ldi	r22, 0x02	; 2
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 2f4:	4c 2f       	mov	r20, r28
 2f6:	44 1f       	adc	r20, r20
 2f8:	44 27       	eor	r20, r20
 2fa:	44 1f       	adc	r20, r20
 2fc:	64 e0       	ldi	r22, 0x04	; 4
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 304:	8f e9       	ldi	r24, 0x9F	; 159
 306:	9f e0       	ldi	r25, 0x0F	; 15
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <LCD_WriteCommand+0x58>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <LCD_WriteCommand+0x5e>
 30e:	00 00       	nop
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	62 e0       	ldi	r22, 0x02	; 2
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 31a:	8f e9       	ldi	r24, 0x9F	; 159
 31c:	9f e0       	ldi	r25, 0x0F	; 15
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <LCD_WriteCommand+0x6e>
 322:	00 c0       	rjmp	.+0      	; 0x324 <LCD_WriteCommand+0x74>
 324:	00 00       	nop
 326:	40 e0       	ldi	r20, 0x00	; 0
 328:	62 e0       	ldi	r22, 0x02	; 2
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 330:	8f e9       	ldi	r24, 0x9F	; 159
 332:	9f e0       	ldi	r25, 0x0F	; 15
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <LCD_WriteCommand+0x84>
 338:	00 c0       	rjmp	.+0      	; 0x33a <LCD_WriteCommand+0x8a>
 33a:	00 00       	nop
 33c:	4c 2f       	mov	r20, r28
 33e:	41 70       	andi	r20, 0x01	; 1
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 348:	c1 fb       	bst	r28, 1
 34a:	44 27       	eor	r20, r20
 34c:	40 f9       	bld	r20, 0
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 356:	c2 fb       	bst	r28, 2
 358:	44 27       	eor	r20, r20
 35a:	40 f9       	bld	r20, 0
 35c:	62 e0       	ldi	r22, 0x02	; 2
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 364:	c3 fb       	bst	r28, 3
 366:	44 27       	eor	r20, r20
 368:	40 f9       	bld	r20, 0
 36a:	64 e0       	ldi	r22, 0x04	; 4
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 372:	8f e9       	ldi	r24, 0x9F	; 159
 374:	9f e0       	ldi	r25, 0x0F	; 15
 376:	01 97       	sbiw	r24, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <LCD_WriteCommand+0xc6>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <LCD_WriteCommand+0xcc>
 37c:	00 00       	nop
 37e:	41 e0       	ldi	r20, 0x01	; 1
 380:	62 e0       	ldi	r22, 0x02	; 2
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 388:	8f e9       	ldi	r24, 0x9F	; 159
 38a:	9f e0       	ldi	r25, 0x0F	; 15
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <LCD_WriteCommand+0xdc>
 390:	00 c0       	rjmp	.+0      	; 0x392 <LCD_WriteCommand+0xe2>
 392:	00 00       	nop
 394:	40 e0       	ldi	r20, 0x00	; 0
 396:	62 e0       	ldi	r22, 0x02	; 2
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 39e:	8f e1       	ldi	r24, 0x1F	; 31
 3a0:	9e e4       	ldi	r25, 0x4E	; 78
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <LCD_WriteCommand+0xf2>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <LCD_WriteCommand+0xf8>
 3a8:	00 00       	nop
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <LCD_Init>:
 3ae:	41 e0       	ldi	r20, 0x01	; 1
 3b0:	63 e0       	ldi	r22, 0x03	; 3
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	0e 94 24 03 	call	0x648	; 0x648 <DIO_setPinDirection>
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	62 e0       	ldi	r22, 0x02	; 2
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	0e 94 24 03 	call	0x648	; 0x648 <DIO_setPinDirection>
 3c2:	41 e0       	ldi	r20, 0x01	; 1
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 24 03 	call	0x648	; 0x648 <DIO_setPinDirection>
 3cc:	41 e0       	ldi	r20, 0x01	; 1
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 24 03 	call	0x648	; 0x648 <DIO_setPinDirection>
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	62 e0       	ldi	r22, 0x02	; 2
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 24 03 	call	0x648	; 0x648 <DIO_setPinDirection>
 3e0:	41 e0       	ldi	r20, 0x01	; 1
 3e2:	64 e0       	ldi	r22, 0x04	; 4
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	0e 94 24 03 	call	0x648	; 0x648 <DIO_setPinDirection>
 3ea:	8f e9       	ldi	r24, 0x9F	; 159
 3ec:	9f e0       	ldi	r25, 0x0F	; 15
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <LCD_Init+0x40>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <LCD_Init+0x46>
 3f4:	00 00       	nop
 3f6:	88 e2       	ldi	r24, 0x28	; 40
 3f8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_WriteCommand>
 3fc:	8f e9       	ldi	r24, 0x9F	; 159
 3fe:	9f e0       	ldi	r25, 0x0F	; 15
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 406:	00 00       	nop
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_WriteCommand>
 40e:	8f e9       	ldi	r24, 0x9F	; 159
 410:	9f e0       	ldi	r25, 0x0F	; 15
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 418:	00 00       	nop
 41a:	8f e0       	ldi	r24, 0x0F	; 15
 41c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_WriteCommand>
 420:	8f e9       	ldi	r24, 0x9F	; 159
 422:	9f e0       	ldi	r25, 0x0F	; 15
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
 42c:	08 95       	ret

0000042e <LCD_WriteChar>:
 42e:	cf 93       	push	r28
 430:	c8 2f       	mov	r28, r24
 432:	41 e0       	ldi	r20, 0x01	; 1
 434:	63 e0       	ldi	r22, 0x03	; 3
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 43c:	8f e9       	ldi	r24, 0x9F	; 159
 43e:	9f e0       	ldi	r25, 0x0F	; 15
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <LCD_WriteChar+0x12>
 444:	00 c0       	rjmp	.+0      	; 0x446 <LCD_WriteChar+0x18>
 446:	00 00       	nop
 448:	c4 fb       	bst	r28, 4
 44a:	44 27       	eor	r20, r20
 44c:	40 f9       	bld	r20, 0
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 456:	c5 fb       	bst	r28, 5
 458:	44 27       	eor	r20, r20
 45a:	40 f9       	bld	r20, 0
 45c:	61 e0       	ldi	r22, 0x01	; 1
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 464:	c6 fb       	bst	r28, 6
 466:	44 27       	eor	r20, r20
 468:	40 f9       	bld	r20, 0
 46a:	62 e0       	ldi	r22, 0x02	; 2
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 472:	4c 2f       	mov	r20, r28
 474:	44 1f       	adc	r20, r20
 476:	44 27       	eor	r20, r20
 478:	44 1f       	adc	r20, r20
 47a:	64 e0       	ldi	r22, 0x04	; 4
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 482:	8f e9       	ldi	r24, 0x9F	; 159
 484:	9f e0       	ldi	r25, 0x0F	; 15
 486:	01 97       	sbiw	r24, 0x01	; 1
 488:	f1 f7       	brne	.-4      	; 0x486 <LCD_WriteChar+0x58>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <LCD_WriteChar+0x5e>
 48c:	00 00       	nop
 48e:	41 e0       	ldi	r20, 0x01	; 1
 490:	62 e0       	ldi	r22, 0x02	; 2
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 498:	8f e9       	ldi	r24, 0x9F	; 159
 49a:	9f e0       	ldi	r25, 0x0F	; 15
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <LCD_WriteChar+0x6e>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <LCD_WriteChar+0x74>
 4a2:	00 00       	nop
 4a4:	40 e0       	ldi	r20, 0x00	; 0
 4a6:	62 e0       	ldi	r22, 0x02	; 2
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 4ae:	8f e9       	ldi	r24, 0x9F	; 159
 4b0:	9f e0       	ldi	r25, 0x0F	; 15
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <LCD_WriteChar+0x84>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <LCD_WriteChar+0x8a>
 4b8:	00 00       	nop
 4ba:	4c 2f       	mov	r20, r28
 4bc:	41 70       	andi	r20, 0x01	; 1
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 4c6:	c1 fb       	bst	r28, 1
 4c8:	44 27       	eor	r20, r20
 4ca:	40 f9       	bld	r20, 0
 4cc:	61 e0       	ldi	r22, 0x01	; 1
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 4d4:	c2 fb       	bst	r28, 2
 4d6:	44 27       	eor	r20, r20
 4d8:	40 f9       	bld	r20, 0
 4da:	62 e0       	ldi	r22, 0x02	; 2
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 4e2:	c3 fb       	bst	r28, 3
 4e4:	44 27       	eor	r20, r20
 4e6:	40 f9       	bld	r20, 0
 4e8:	64 e0       	ldi	r22, 0x04	; 4
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 4f0:	8f e9       	ldi	r24, 0x9F	; 159
 4f2:	9f e0       	ldi	r25, 0x0F	; 15
 4f4:	01 97       	sbiw	r24, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <LCD_WriteChar+0xc6>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <LCD_WriteChar+0xcc>
 4fa:	00 00       	nop
 4fc:	41 e0       	ldi	r20, 0x01	; 1
 4fe:	62 e0       	ldi	r22, 0x02	; 2
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 506:	8f e9       	ldi	r24, 0x9F	; 159
 508:	9f e0       	ldi	r25, 0x0F	; 15
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	f1 f7       	brne	.-4      	; 0x50a <LCD_WriteChar+0xdc>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <LCD_WriteChar+0xe2>
 510:	00 00       	nop
 512:	40 e0       	ldi	r20, 0x00	; 0
 514:	62 e0       	ldi	r22, 0x02	; 2
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 51c:	8f e1       	ldi	r24, 0x1F	; 31
 51e:	9e e4       	ldi	r25, 0x4E	; 78
 520:	01 97       	sbiw	r24, 0x01	; 1
 522:	f1 f7       	brne	.-4      	; 0x520 <LCD_WriteChar+0xf2>
 524:	00 c0       	rjmp	.+0      	; 0x526 <LCD_WriteChar+0xf8>
 526:	00 00       	nop
 528:	cf 91       	pop	r28
 52a:	08 95       	ret

0000052c <LCD_WriteString>:
 52c:	0f 93       	push	r16
 52e:	1f 93       	push	r17
 530:	cf 93       	push	r28
 532:	8c 01       	movw	r16, r24
 534:	c0 e0       	ldi	r28, 0x00	; 0
 536:	03 c0       	rjmp	.+6      	; 0x53e <LCD_WriteString+0x12>
 538:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_WriteChar>
 53c:	cf 5f       	subi	r28, 0xFF	; 255
 53e:	f8 01       	movw	r30, r16
 540:	ec 0f       	add	r30, r28
 542:	f1 1d       	adc	r31, r1
 544:	80 81       	ld	r24, Z
 546:	81 11       	cpse	r24, r1
 548:	f7 cf       	rjmp	.-18     	; 0x538 <LCD_WriteString+0xc>
 54a:	cf 91       	pop	r28
 54c:	1f 91       	pop	r17
 54e:	0f 91       	pop	r16
 550:	08 95       	ret

00000552 <LCD_Clear>:

void LCD_Clear(void)
{
    LCD_WriteCommand(0x01);
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_WriteCommand>
 558:	08 95       	ret

0000055a <LED_init>:
#include "LED.h"

void LED_init(){
	
	// Set All LEDs as Output
	DIO_setPinDirection(RED_PORT, RED_PIN, DIO_PIN_OUTPUT);
 55a:	41 e0       	ldi	r20, 0x01	; 1
 55c:	67 e0       	ldi	r22, 0x07	; 7
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	0e 94 24 03 	call	0x648	; 0x648 <DIO_setPinDirection>
	DIO_setPinDirection(YELLOW_PORT, YELLOW_PIN, DIO_PIN_OUTPUT);
 564:	41 e0       	ldi	r20, 0x01	; 1
 566:	66 e0       	ldi	r22, 0x06	; 6
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	0e 94 24 03 	call	0x648	; 0x648 <DIO_setPinDirection>
	DIO_setPinDirection(GREEN_PORT, GREEN_PIN, DIO_PIN_OUTPUT);
 56e:	41 e0       	ldi	r20, 0x01	; 1
 570:	64 e0       	ldi	r22, 0x04	; 4
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	0e 94 24 03 	call	0x648	; 0x648 <DIO_setPinDirection>
	DIO_setPinDirection(BLUE_PORT, BLUE_PIN, DIO_PIN_OUTPUT);
 578:	41 e0       	ldi	r20, 0x01	; 1
 57a:	65 e0       	ldi	r22, 0x05	; 5
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	0e 94 24 03 	call	0x648	; 0x648 <DIO_setPinDirection>
	
	// Turn OFF All LEDs
	DIO_WritePin(RED_PORT, RED_PIN, PIN_LOW);
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	67 e0       	ldi	r22, 0x07	; 7
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
	DIO_WritePin(YELLOW_PORT, YELLOW_PIN, PIN_LOW);
 58c:	40 e0       	ldi	r20, 0x00	; 0
 58e:	66 e0       	ldi	r22, 0x06	; 6
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
	DIO_WritePin(GREEN_PORT, GREEN_PIN, PIN_LOW);
 596:	40 e0       	ldi	r20, 0x00	; 0
 598:	64 e0       	ldi	r22, 0x04	; 4
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
	DIO_WritePin(BLUE_PORT, BLUE_PIN, PIN_LOW);
 5a0:	40 e0       	ldi	r20, 0x00	; 0
 5a2:	65 e0       	ldi	r22, 0x05	; 5
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 5aa:	08 95       	ret

000005ac <RED_LED>:
}

void RED_LED(uint8_t state){
	switch (state)
 5ac:	88 23       	and	r24, r24
 5ae:	39 f0       	breq	.+14     	; 0x5be <RED_LED+0x12>
 5b0:	81 30       	cpi	r24, 0x01	; 1
 5b2:	51 f4       	brne	.+20     	; 0x5c8 <RED_LED+0x1c>
	{
		case ON:
		DIO_WritePin(RED_PORT, RED_PIN, PIN_HIGH);
 5b4:	41 e0       	ldi	r20, 0x01	; 1
 5b6:	67 e0       	ldi	r22, 0x07	; 7
 5b8:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
		break;
 5bc:	08 95       	ret
		case OFF:
		DIO_WritePin(RED_PORT, RED_PIN, PIN_LOW);
 5be:	40 e0       	ldi	r20, 0x00	; 0
 5c0:	67 e0       	ldi	r22, 0x07	; 7
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 5c8:	08 95       	ret

000005ca <YELLOW_LED>:
		break;
	}
}

void YELLOW_LED(uint8_t state){
	switch (state)
 5ca:	88 23       	and	r24, r24
 5cc:	39 f0       	breq	.+14     	; 0x5dc <YELLOW_LED+0x12>
 5ce:	81 30       	cpi	r24, 0x01	; 1
 5d0:	51 f4       	brne	.+20     	; 0x5e6 <YELLOW_LED+0x1c>
	{
		case ON:
		ToggleBit(YELLOW_REGISTER, YELLOW_PIN);
 5d2:	9b b3       	in	r25, 0x1b	; 27
 5d4:	80 e4       	ldi	r24, 0x40	; 64
 5d6:	89 27       	eor	r24, r25
 5d8:	8b bb       	out	0x1b, r24	; 27
		break;
 5da:	08 95       	ret
		case OFF:
		DIO_WritePin(YELLOW_PORT, YELLOW_PIN, PIN_LOW);
 5dc:	40 e0       	ldi	r20, 0x00	; 0
 5de:	66 e0       	ldi	r22, 0x06	; 6
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 5e6:	08 95       	ret

000005e8 <GREEN_LED>:
		break;
	}
}

void GREEN_LED(uint8_t state){
	switch (state)
 5e8:	88 23       	and	r24, r24
 5ea:	41 f0       	breq	.+16     	; 0x5fc <GREEN_LED+0x14>
 5ec:	81 30       	cpi	r24, 0x01	; 1
 5ee:	59 f4       	brne	.+22     	; 0x606 <GREEN_LED+0x1e>
	{
		case ON:
		DIO_WritePin(GREEN_PORT, GREEN_PIN, PIN_HIGH);
 5f0:	41 e0       	ldi	r20, 0x01	; 1
 5f2:	64 e0       	ldi	r22, 0x04	; 4
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
		break;
 5fa:	08 95       	ret
		case OFF:
		DIO_WritePin(GREEN_PORT, GREEN_PIN, PIN_LOW);
 5fc:	40 e0       	ldi	r20, 0x00	; 0
 5fe:	64 e0       	ldi	r22, 0x04	; 4
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 606:	08 95       	ret

00000608 <BLUE_LED>:
		break;
	}
}

void BLUE_LED(uint8_t state){
	switch (state)
 608:	88 23       	and	r24, r24
 60a:	41 f0       	breq	.+16     	; 0x61c <BLUE_LED+0x14>
 60c:	81 30       	cpi	r24, 0x01	; 1
 60e:	59 f4       	brne	.+22     	; 0x626 <BLUE_LED+0x1e>
	{
		case ON:
		DIO_WritePin(BLUE_PORT, BLUE_PIN, PIN_HIGH);
 610:	41 e0       	ldi	r20, 0x01	; 1
 612:	65 e0       	ldi	r22, 0x05	; 5
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
		break;
 61a:	08 95       	ret
		case OFF:
		DIO_WritePin(BLUE_PORT, BLUE_PIN, PIN_LOW);
 61c:	40 e0       	ldi	r20, 0x00	; 0
 61e:	65 e0       	ldi	r22, 0x05	; 5
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	0e 94 94 03 	call	0x728	; 0x728 <DIO_WritePin>
 626:	08 95       	ret

00000628 <main>:
uint8_t *LCD_Data = "Cars"; 

int main(void)
{
	
	LED_init();
 628:	0e 94 ad 02 	call	0x55a	; 0x55a <LED_init>
	LCD_Init();
 62c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_Init>
	LCD_Clear();
 630:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_Clear>
	state = green_state;
 634:	8a e0       	ldi	r24, 0x0A	; 10
 636:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <state>

	
	PedestrianButton_init();
 63a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <PedestrianButton_init>
	//LCD_moveCursor(1, 0);
	
    while (1) 
    {
		Traffic_state(&state);
 63e:	81 e6       	ldi	r24, 0x61	; 97
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	0e 94 80 00 	call	0x100	; 0x100 <Traffic_state>
 646:	fb cf       	rjmp	.-10     	; 0x63e <main+0x16>

00000648 <DIO_setPinDirection>:
	}
}

void DIO_setPinDirection(uint8_t Port, uint8_t pin, uint8_t dir)
{
	if( dir == DIO_PIN_OUTPUT)
 648:	41 30       	cpi	r20, 0x01	; 1
 64a:	a1 f5       	brne	.+104    	; 0x6b4 <DIO_setPinDirection+0x6c>
	{
		switch(Port)
 64c:	81 30       	cpi	r24, 0x01	; 1
 64e:	89 f0       	breq	.+34     	; 0x672 <DIO_setPinDirection+0x2a>
 650:	28 f0       	brcs	.+10     	; 0x65c <DIO_setPinDirection+0x14>
 652:	82 30       	cpi	r24, 0x02	; 2
 654:	c9 f0       	breq	.+50     	; 0x688 <DIO_setPinDirection+0x40>
 656:	83 30       	cpi	r24, 0x03	; 3
 658:	11 f1       	breq	.+68     	; 0x69e <DIO_setPinDirection+0x56>
 65a:	08 95       	ret
		{
			case DIO_PORTA:
			SetBit(DDRA, pin);
 65c:	2a b3       	in	r18, 0x1a	; 26
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	02 c0       	rjmp	.+4      	; 0x668 <DIO_setPinDirection+0x20>
 664:	88 0f       	add	r24, r24
 666:	99 1f       	adc	r25, r25
 668:	6a 95       	dec	r22
 66a:	e2 f7       	brpl	.-8      	; 0x664 <DIO_setPinDirection+0x1c>
 66c:	82 2b       	or	r24, r18
 66e:	8a bb       	out	0x1a, r24	; 26
			break;
 670:	08 95       	ret
			
			case DIO_PORTB:
			SetBit(DDRB, pin);
 672:	27 b3       	in	r18, 0x17	; 23
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	02 c0       	rjmp	.+4      	; 0x67e <DIO_setPinDirection+0x36>
 67a:	88 0f       	add	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	6a 95       	dec	r22
 680:	e2 f7       	brpl	.-8      	; 0x67a <DIO_setPinDirection+0x32>
 682:	82 2b       	or	r24, r18
 684:	87 bb       	out	0x17, r24	; 23
			break;
 686:	08 95       	ret
			
			case DIO_PORTC:
			SetBit(DDRC, pin);
 688:	24 b3       	in	r18, 0x14	; 20
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	02 c0       	rjmp	.+4      	; 0x694 <DIO_setPinDirection+0x4c>
 690:	88 0f       	add	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	6a 95       	dec	r22
 696:	e2 f7       	brpl	.-8      	; 0x690 <DIO_setPinDirection+0x48>
 698:	82 2b       	or	r24, r18
 69a:	84 bb       	out	0x14, r24	; 20
			break;
 69c:	08 95       	ret
			
			case DIO_PORTD:
			SetBit(DDRD, pin);
 69e:	21 b3       	in	r18, 0x11	; 17
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <DIO_setPinDirection+0x62>
 6a6:	88 0f       	add	r24, r24
 6a8:	99 1f       	adc	r25, r25
 6aa:	6a 95       	dec	r22
 6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <DIO_setPinDirection+0x5e>
 6ae:	82 2b       	or	r24, r18
 6b0:	81 bb       	out	0x11, r24	; 17
			break;
 6b2:	08 95       	ret
			default:
			/*do nothing*/
			break;
		}
	}
	else if(dir == DIO_PIN_INPUT)
 6b4:	41 11       	cpse	r20, r1
 6b6:	37 c0       	rjmp	.+110    	; 0x726 <DIO_setPinDirection+0xde>
	{
		switch(Port)
 6b8:	81 30       	cpi	r24, 0x01	; 1
 6ba:	91 f0       	breq	.+36     	; 0x6e0 <DIO_setPinDirection+0x98>
 6bc:	28 f0       	brcs	.+10     	; 0x6c8 <DIO_setPinDirection+0x80>
 6be:	82 30       	cpi	r24, 0x02	; 2
 6c0:	d9 f0       	breq	.+54     	; 0x6f8 <DIO_setPinDirection+0xb0>
 6c2:	83 30       	cpi	r24, 0x03	; 3
 6c4:	29 f1       	breq	.+74     	; 0x710 <DIO_setPinDirection+0xc8>
 6c6:	08 95       	ret
		{
			case DIO_PORTA:
			ClearBit(DDRA, pin);
 6c8:	2a b3       	in	r18, 0x1a	; 26
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <DIO_setPinDirection+0x8c>
 6d0:	88 0f       	add	r24, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	6a 95       	dec	r22
 6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <DIO_setPinDirection+0x88>
 6d8:	80 95       	com	r24
 6da:	82 23       	and	r24, r18
 6dc:	8a bb       	out	0x1a, r24	; 26
			break;
 6de:	08 95       	ret
			
			case DIO_PORTB:
			ClearBit(DDRB, pin);
 6e0:	27 b3       	in	r18, 0x17	; 23
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <DIO_setPinDirection+0xa4>
 6e8:	88 0f       	add	r24, r24
 6ea:	99 1f       	adc	r25, r25
 6ec:	6a 95       	dec	r22
 6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <DIO_setPinDirection+0xa0>
 6f0:	80 95       	com	r24
 6f2:	82 23       	and	r24, r18
 6f4:	87 bb       	out	0x17, r24	; 23
			break;
 6f6:	08 95       	ret
			
			case DIO_PORTC:
			ClearBit(DDRC, pin);
 6f8:	24 b3       	in	r18, 0x14	; 20
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <DIO_setPinDirection+0xbc>
 700:	88 0f       	add	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	6a 95       	dec	r22
 706:	e2 f7       	brpl	.-8      	; 0x700 <DIO_setPinDirection+0xb8>
 708:	80 95       	com	r24
 70a:	82 23       	and	r24, r18
 70c:	84 bb       	out	0x14, r24	; 20
			break;
 70e:	08 95       	ret
			
			case DIO_PORTD:
			ClearBit(DDRD, pin);
 710:	21 b3       	in	r18, 0x11	; 17
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	02 c0       	rjmp	.+4      	; 0x71c <DIO_setPinDirection+0xd4>
 718:	88 0f       	add	r24, r24
 71a:	99 1f       	adc	r25, r25
 71c:	6a 95       	dec	r22
 71e:	e2 f7       	brpl	.-8      	; 0x718 <DIO_setPinDirection+0xd0>
 720:	80 95       	com	r24
 722:	82 23       	and	r24, r18
 724:	81 bb       	out	0x11, r24	; 17
 726:	08 95       	ret

00000728 <DIO_WritePin>:
	}
}

void DIO_WritePin(uint8_t Port, uint8_t pin, uint8_t val)
{
	if(val)
 728:	44 23       	and	r20, r20
 72a:	a1 f1       	breq	.+104    	; 0x794 <DIO_WritePin+0x6c>
	{
		switch(Port)
 72c:	81 30       	cpi	r24, 0x01	; 1
 72e:	89 f0       	breq	.+34     	; 0x752 <DIO_WritePin+0x2a>
 730:	28 f0       	brcs	.+10     	; 0x73c <DIO_WritePin+0x14>
 732:	82 30       	cpi	r24, 0x02	; 2
 734:	c9 f0       	breq	.+50     	; 0x768 <DIO_WritePin+0x40>
 736:	83 30       	cpi	r24, 0x03	; 3
 738:	11 f1       	breq	.+68     	; 0x77e <DIO_WritePin+0x56>
 73a:	08 95       	ret
		{
			case DIO_PORTA:
			SetBit(PORTA, pin);
 73c:	2b b3       	in	r18, 0x1b	; 27
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	02 c0       	rjmp	.+4      	; 0x748 <DIO_WritePin+0x20>
 744:	88 0f       	add	r24, r24
 746:	99 1f       	adc	r25, r25
 748:	6a 95       	dec	r22
 74a:	e2 f7       	brpl	.-8      	; 0x744 <DIO_WritePin+0x1c>
 74c:	82 2b       	or	r24, r18
 74e:	8b bb       	out	0x1b, r24	; 27
			break;
 750:	08 95       	ret
		
			case DIO_PORTB:
			SetBit(PORTB, pin);
 752:	28 b3       	in	r18, 0x18	; 24
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	02 c0       	rjmp	.+4      	; 0x75e <DIO_WritePin+0x36>
 75a:	88 0f       	add	r24, r24
 75c:	99 1f       	adc	r25, r25
 75e:	6a 95       	dec	r22
 760:	e2 f7       	brpl	.-8      	; 0x75a <DIO_WritePin+0x32>
 762:	82 2b       	or	r24, r18
 764:	88 bb       	out	0x18, r24	; 24
			break;
 766:	08 95       	ret
		
			case DIO_PORTC:
			SetBit(PORTC, pin);
 768:	25 b3       	in	r18, 0x15	; 21
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	02 c0       	rjmp	.+4      	; 0x774 <DIO_WritePin+0x4c>
 770:	88 0f       	add	r24, r24
 772:	99 1f       	adc	r25, r25
 774:	6a 95       	dec	r22
 776:	e2 f7       	brpl	.-8      	; 0x770 <DIO_WritePin+0x48>
 778:	82 2b       	or	r24, r18
 77a:	85 bb       	out	0x15, r24	; 21
			break;
 77c:	08 95       	ret
		
			case DIO_PORTD:
			SetBit(PORTD, pin);
 77e:	22 b3       	in	r18, 0x12	; 18
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	02 c0       	rjmp	.+4      	; 0x78a <DIO_WritePin+0x62>
 786:	88 0f       	add	r24, r24
 788:	99 1f       	adc	r25, r25
 78a:	6a 95       	dec	r22
 78c:	e2 f7       	brpl	.-8      	; 0x786 <DIO_WritePin+0x5e>
 78e:	82 2b       	or	r24, r18
 790:	82 bb       	out	0x12, r24	; 18
			break;
 792:	08 95       	ret
			break;
		}
	}
	else
	{
		switch(Port)
 794:	81 30       	cpi	r24, 0x01	; 1
 796:	91 f0       	breq	.+36     	; 0x7bc <DIO_WritePin+0x94>
 798:	28 f0       	brcs	.+10     	; 0x7a4 <DIO_WritePin+0x7c>
 79a:	82 30       	cpi	r24, 0x02	; 2
 79c:	d9 f0       	breq	.+54     	; 0x7d4 <DIO_WritePin+0xac>
 79e:	83 30       	cpi	r24, 0x03	; 3
 7a0:	29 f1       	breq	.+74     	; 0x7ec <DIO_WritePin+0xc4>
 7a2:	08 95       	ret
		{
			case DIO_PORTA:
			ClearBit(PORTA, pin);
 7a4:	2b b3       	in	r18, 0x1b	; 27
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <DIO_WritePin+0x88>
 7ac:	88 0f       	add	r24, r24
 7ae:	99 1f       	adc	r25, r25
 7b0:	6a 95       	dec	r22
 7b2:	e2 f7       	brpl	.-8      	; 0x7ac <DIO_WritePin+0x84>
 7b4:	80 95       	com	r24
 7b6:	82 23       	and	r24, r18
 7b8:	8b bb       	out	0x1b, r24	; 27
			break;
 7ba:	08 95       	ret
			
			case DIO_PORTB:
			ClearBit(PORTB, pin);
 7bc:	28 b3       	in	r18, 0x18	; 24
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <DIO_WritePin+0xa0>
 7c4:	88 0f       	add	r24, r24
 7c6:	99 1f       	adc	r25, r25
 7c8:	6a 95       	dec	r22
 7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <DIO_WritePin+0x9c>
 7cc:	80 95       	com	r24
 7ce:	82 23       	and	r24, r18
 7d0:	88 bb       	out	0x18, r24	; 24
			break;
 7d2:	08 95       	ret
			
			case DIO_PORTC:
			ClearBit(PORTC, pin);
 7d4:	25 b3       	in	r18, 0x15	; 21
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	02 c0       	rjmp	.+4      	; 0x7e0 <DIO_WritePin+0xb8>
 7dc:	88 0f       	add	r24, r24
 7de:	99 1f       	adc	r25, r25
 7e0:	6a 95       	dec	r22
 7e2:	e2 f7       	brpl	.-8      	; 0x7dc <DIO_WritePin+0xb4>
 7e4:	80 95       	com	r24
 7e6:	82 23       	and	r24, r18
 7e8:	85 bb       	out	0x15, r24	; 21
			break;
 7ea:	08 95       	ret
			
			case DIO_PORTD:
			ClearBit(PORTD, pin);
 7ec:	22 b3       	in	r18, 0x12	; 18
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <DIO_WritePin+0xd0>
 7f4:	88 0f       	add	r24, r24
 7f6:	99 1f       	adc	r25, r25
 7f8:	6a 95       	dec	r22
 7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <DIO_WritePin+0xcc>
 7fc:	80 95       	com	r24
 7fe:	82 23       	and	r24, r18
 800:	82 bb       	out	0x12, r24	; 18
 802:	08 95       	ret

00000804 <EXTI_GlobalSet>:


void EXTI_GlobalSet()
{
	#if	GLOBAL_INTERRUPT == GLOBAL_INTERRUPT_ENABLE
		SetBit(SREG, 7);
 804:	8f b7       	in	r24, 0x3f	; 63
 806:	80 68       	ori	r24, 0x80	; 128
 808:	8f bf       	out	0x3f, r24	; 63
 80a:	08 95       	ret

0000080c <EXTI_interruptconfig>:
		ClearBit(SREG, 7);
	#endif
}

void EXTI_interruptconfig(EXTi_INTERRUPTconfiguration *config_struct)
{
 80c:	cf 93       	push	r28
 80e:	df 93       	push	r29
 810:	ec 01       	movw	r28, r24
	/*	enable gloabl interrupts	*/
	EXTI_GlobalSet();
 812:	0e 94 02 04 	call	0x804	; 0x804 <EXTI_GlobalSet>
	
		/*	enable external interrupt request	*/
		SetBit(GICR, config_struct->IRQ_en);
 816:	2b b7       	in	r18, 0x3b	; 59
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	0a 80       	ldd	r0, Y+2	; 0x02
 81e:	02 c0       	rjmp	.+4      	; 0x824 <EXTI_interruptconfig+0x18>
 820:	88 0f       	add	r24, r24
 822:	99 1f       	adc	r25, r25
 824:	0a 94       	dec	r0
 826:	e2 f7       	brpl	.-8      	; 0x820 <EXTI_interruptconfig+0x14>
 828:	82 2b       	or	r24, r18
 82a:	8b bf       	out	0x3b, r24	; 59
		
		switch(config_struct->EXTI_source)
 82c:	88 81       	ld	r24, Y
 82e:	81 30       	cpi	r24, 0x01	; 1
 830:	49 f0       	breq	.+18     	; 0x844 <EXTI_interruptconfig+0x38>
 832:	18 f0       	brcs	.+6      	; 0x83a <EXTI_interruptconfig+0x2e>
 834:	82 30       	cpi	r24, 0x02	; 2
 836:	89 f0       	breq	.+34     	; 0x85a <EXTI_interruptconfig+0x4e>
 838:	1a c0       	rjmp	.+52     	; 0x86e <__stack+0xf>
		{
		/*	external interrupts trigger control	*/
		case EX_INT0:
			MCUCR |= config_struct->EXTI_trigger;
 83a:	95 b7       	in	r25, 0x35	; 53
 83c:	89 81       	ldd	r24, Y+1	; 0x01
 83e:	89 2b       	or	r24, r25
 840:	85 bf       	out	0x35, r24	; 53
			break;
 842:	15 c0       	rjmp	.+42     	; 0x86e <__stack+0xf>
			
		case EX_INT1:
			MCUCR |= config_struct->EXTI_trigger << 2;
 844:	25 b7       	in	r18, 0x35	; 53
 846:	99 81       	ldd	r25, Y+1	; 0x01
 848:	89 2f       	mov	r24, r25
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	88 0f       	add	r24, r24
 84e:	99 1f       	adc	r25, r25
 850:	88 0f       	add	r24, r24
 852:	99 1f       	adc	r25, r25
 854:	82 2b       	or	r24, r18
 856:	85 bf       	out	0x35, r24	; 53
			break;
 858:	0a c0       	rjmp	.+20     	; 0x86e <__stack+0xf>
			
		case EX_INT2:
			if(config_struct->EXTI_trigger == FALLING_EDGE)
 85a:	89 81       	ldd	r24, Y+1	; 0x01
 85c:	82 30       	cpi	r24, 0x02	; 2
 85e:	21 f4       	brne	.+8      	; 0x868 <__stack+0x9>
				ClearBit(MCUCSR, 6);
 860:	84 b7       	in	r24, 0x34	; 52
 862:	8f 7b       	andi	r24, 0xBF	; 191
 864:	84 bf       	out	0x34, r24	; 52
 866:	03 c0       	rjmp	.+6      	; 0x86e <__stack+0xf>
			else
				SetBit(MCUCSR, 6);
 868:	84 b7       	in	r24, 0x34	; 52
 86a:	80 64       	ori	r24, 0x40	; 64
 86c:	84 bf       	out	0x34, r24	; 52
		}
	
 86e:	df 91       	pop	r29
 870:	cf 91       	pop	r28
 872:	08 95       	ret

00000874 <_exit>:
 874:	f8 94       	cli

00000876 <__stop_program>:
 876:	ff cf       	rjmp	.-2      	; 0x876 <__stop_program>
