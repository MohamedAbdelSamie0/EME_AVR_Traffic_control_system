
Traffic_control_lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000870  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000870  00000904  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006e  0080006e  00000912  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000912  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000944  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ce6  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7d  00000000  00000000  000027d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ec6  00000000  00000000  00003353  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  0000421c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fd  00000000  00000000  000044d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d0d  00000000  00000000  00004ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000057e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0e 03 	call	0x61c	; 0x61c <main>
  8a:	0c 94 36 04 	jmp	0x86c	; 0x86c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <delay_5secs>:
#include "APP.h"

uint8_t g_BREAK_DELAY = 1; 

void delay_5secs(uint32_t delay)
{
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	6b 01       	movw	r12, r22
  9c:	7c 01       	movw	r14, r24
	   for (uint16_t i = 0; i < delay; i++) {
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0b c0       	rjmp	.+22     	; 0xba <delay_5secs+0x28>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	ef e9       	ldi	r30, 0x9F	; 159
  a6:	ff e0       	ldi	r31, 0x0F	; 15
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <delay_5secs+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <delay_5secs+0x1c>
  ae:	00 00       	nop
		   // Each iteration of this loop introduces a delay of about 1ms using _delay_us
		   _delay_us(1000);  // Delay for 1000 microseconds (1ms)
		   if(!g_BREAK_DELAY)
  b0:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b4:	22 23       	and	r18, r18
  b6:	49 f0       	breq	.+18     	; 0xca <delay_5secs+0x38>

uint8_t g_BREAK_DELAY = 1; 

void delay_5secs(uint32_t delay)
{
	   for (uint16_t i = 0; i < delay; i++) {
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	ac 01       	movw	r20, r24
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	4c 15       	cp	r20, r12
  c2:	5d 05       	cpc	r21, r13
  c4:	6e 05       	cpc	r22, r14
  c6:	7f 05       	cpc	r23, r15
  c8:	68 f3       	brcs	.-38     	; 0xa4 <delay_5secs+0x12>
		   // Each iteration of this loop introduces a delay of about 1ms using _delay_us
		   _delay_us(1000);  // Delay for 1000 microseconds (1ms)
		   if(!g_BREAK_DELAY)
				break;
	   }
}
  ca:	ff 90       	pop	r15
  cc:	ef 90       	pop	r14
  ce:	df 90       	pop	r13
  d0:	cf 90       	pop	r12
  d2:	08 95       	ret

000000d4 <YellowBlink>:

/*Function to blink yellow led	*/
void YellowBlink(){
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
	int count = 5;
  d8:	c5 e0       	ldi	r28, 0x05	; 5
  da:	d0 e0       	ldi	r29, 0x00	; 0
	while(--count){
  dc:	09 c0       	rjmp	.+18     	; 0xf0 <YellowBlink+0x1c>
		YELLOW_LED(ON);
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 df 02 	call	0x5be	; 0x5be <YELLOW_LED>
		delay_5secs(1000);
  e4:	68 ee       	ldi	r22, 0xE8	; 232
  e6:	73 e0       	ldi	r23, 0x03	; 3
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 49 00 	call	0x92	; 0x92 <delay_5secs>
}

/*Function to blink yellow led	*/
void YellowBlink(){
	int count = 5;
	while(--count){
  f0:	21 97       	sbiw	r28, 0x01	; 1
  f2:	a9 f7       	brne	.-22     	; 0xde <YellowBlink+0xa>
		YELLOW_LED(ON);
		delay_5secs(1000);
	}
	YELLOW_LED(OFF);
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 df 02 	call	0x5be	; 0x5be <YELLOW_LED>
}
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <Traffic_state>:


void Traffic_state(uint8_t *tr_state)
{
 100:	ec 01       	movw	r28, r24
	while(1)
	{
		switch(*tr_state)
 102:	88 81       	ld	r24, Y
 104:	8b 30       	cpi	r24, 0x0B	; 11
 106:	f9 f0       	breq	.+62     	; 0x146 <Traffic_state+0x46>
 108:	8c 30       	cpi	r24, 0x0C	; 12
 10a:	71 f1       	breq	.+92     	; 0x168 <Traffic_state+0x68>
 10c:	8a 30       	cpi	r24, 0x0A	; 10
 10e:	c9 f7       	brne	.-14     	; 0x102 <Traffic_state+0x2>
		{
			case green_state:

			g_BREAK_DELAY = 1;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			GREEN_LED(ON);
 116:	0e 94 ee 02 	call	0x5dc	; 0x5dc <GREEN_LED>
			delay_5secs(FIVE_SEC);
 11a:	68 e8       	ldi	r22, 0x88	; 136
 11c:	73 e1       	ldi	r23, 0x13	; 19
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 49 00 	call	0x92	; 0x92 <delay_5secs>
			GREEN_LED(OFF);
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 ee 02 	call	0x5dc	; 0x5dc <GREEN_LED>
			BLUE_LED(OFF);
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <BLUE_LED>
			if(g_BREAK_DELAY)
 132:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 136:	88 23       	and	r24, r24
 138:	19 f0       	breq	.+6      	; 0x140 <Traffic_state+0x40>
				*tr_state = yellow_state;
 13a:	8b e0       	ldi	r24, 0x0B	; 11
 13c:	88 83       	st	Y, r24
 13e:	e1 cf       	rjmp	.-62     	; 0x102 <Traffic_state+0x2>
			else
				*tr_state = green_state;
 140:	8a e0       	ldi	r24, 0x0A	; 10
 142:	88 83       	st	Y, r24
 144:	de cf       	rjmp	.-68     	; 0x102 <Traffic_state+0x2>
			break;
		
			case yellow_state:
			g_BREAK_DELAY = 1;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			YellowBlink();
 14c:	0e 94 6a 00 	call	0xd4	; 0xd4 <YellowBlink>
			BLUE_LED(OFF);
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 fe 02 	call	0x5fc	; 0x5fc <BLUE_LED>
			if(*tr_state == yellow_state)
 156:	88 81       	ld	r24, Y
 158:	8b 30       	cpi	r24, 0x0B	; 11
 15a:	19 f4       	brne	.+6      	; 0x162 <Traffic_state+0x62>
				*tr_state = red_state;
 15c:	8c e0       	ldi	r24, 0x0C	; 12
 15e:	88 83       	st	Y, r24
 160:	d0 cf       	rjmp	.-96     	; 0x102 <Traffic_state+0x2>
			else
				*tr_state = green_state;
 162:	8a e0       	ldi	r24, 0x0A	; 10
 164:	88 83       	st	Y, r24
 166:	cd cf       	rjmp	.-102    	; 0x102 <Traffic_state+0x2>
			break;
		
			case red_state:
			g_BREAK_DELAY = 1;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
			RED_LED(ON);
 16e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <RED_LED>
			BLUE_LED(ON);
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 fe 02 	call	0x5fc	; 0x5fc <BLUE_LED>
			delay_5secs(FIVE_SEC);
 178:	68 e8       	ldi	r22, 0x88	; 136
 17a:	73 e1       	ldi	r23, 0x13	; 19
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 49 00 	call	0x92	; 0x92 <delay_5secs>
			RED_LED(OFF);
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <RED_LED>
			BLUE_LED(OFF);
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <BLUE_LED>
			*tr_state = green_state;
 190:	8a e0       	ldi	r24, 0x0A	; 10
 192:	88 83       	st	Y, r24
			break;
 194:	b6 cf       	rjmp	.-148    	; 0x102 <Traffic_state+0x2>

00000196 <PedestrianButton_init>:

extern uint8_t g_BREAK_DELAY;
extern uint8_t state;

void PedestrianButton_init(){
	DIO_setPinDirection(PEDESTRIAN_PORT, PEDESTRIAN_PIN, DIO_PIN_INPUT);
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	63 e0       	ldi	r22, 0x03	; 3
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	0e 94 20 03 	call	0x640	; 0x640 <DIO_setPinDirection>
	
	EXTI_Config->EXTI_source = EX_INT1;
 1a0:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <__data_end>
 1a4:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <__data_end+0x1>
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	80 83       	st	Z, r24
	EXTI_Config->EXTI_trigger = ANY_LOGIC_CHANGE;
 1ac:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <__data_end>
 1b0:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <__data_end+0x1>
 1b4:	81 83       	std	Z+1, r24	; 0x01
	EXTI_Config->IRQ_en = GLOBAL_INT1_EN;
 1b6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 1ba:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__data_end+0x1>
 1be:	27 e0       	ldi	r18, 0x07	; 7
 1c0:	fc 01       	movw	r30, r24
 1c2:	22 83       	std	Z+2, r18	; 0x02
	EXTI_Config->Flag_clear = GLOBAL_INT1_FLAG;
 1c4:	23 83       	std	Z+3, r18	; 0x03
	
	EXTI_interruptconfig(EXTI_Config);
 1c6:	0e 94 02 04 	call	0x804	; 0x804 <EXTI_interruptconfig>
 1ca:	08 95       	ret

000001cc <__vector_2>:
}

ISR(INT1_vect){
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	2f 93       	push	r18
 1d8:	3f 93       	push	r19
 1da:	4f 93       	push	r20
 1dc:	5f 93       	push	r21
 1de:	6f 93       	push	r22
 1e0:	7f 93       	push	r23
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	af 93       	push	r26
 1e8:	bf 93       	push	r27
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
	
	switch(state)
 1ee:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <state>
 1f2:	8c 30       	cpi	r24, 0x0C	; 12
 1f4:	21 f1       	breq	.+72     	; 0x23e <__vector_2+0x72>
	{
		default:
		
		state = green_state;
 1f6:	8a e0       	ldi	r24, 0x0A	; 10
 1f8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <state>
		GREEN_LED(OFF);
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 ee 02 	call	0x5dc	; 0x5dc <GREEN_LED>
		YellowBlink();
 202:	0e 94 6a 00 	call	0xd4	; 0xd4 <YellowBlink>
		LCD_Clear();
 206:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_Clear>
		LCD_WriteString((uint8_t*)"PEDESTRIAN");
 20a:	82 e6       	ldi	r24, 0x62	; 98
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_WriteString>
		BLUE_LED(ON);
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	0e 94 fe 02 	call	0x5fc	; 0x5fc <BLUE_LED>
		RED_LED(ON);
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <RED_LED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21e:	2f ef       	ldi	r18, 0xFF	; 255
 220:	83 e2       	ldi	r24, 0x23	; 35
 222:	94 ef       	ldi	r25, 0xF4	; 244
 224:	21 50       	subi	r18, 0x01	; 1
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <__vector_2+0x58>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <__vector_2+0x62>
 22e:	00 00       	nop
		_delay_ms(5000);
		BLUE_LED(OFF);
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 fe 02 	call	0x5fc	; 0x5fc <BLUE_LED>
		RED_LED(OFF);
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <RED_LED>
		break;
 23c:	15 c0       	rjmp	.+42     	; 0x268 <__vector_2+0x9c>
		
		case red_state:
	
		state = green_state;
 23e:	8a e0       	ldi	r24, 0x0A	; 10
 240:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <state>
		LCD_Clear();
 244:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_Clear>
		LCD_WriteString((uint8_t*)"PEDESTRIAN");
 248:	82 e6       	ldi	r24, 0x62	; 98
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_WriteString>
		BLUE_LED(ON);
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 fe 02 	call	0x5fc	; 0x5fc <BLUE_LED>
 256:	2f ef       	ldi	r18, 0xFF	; 255
 258:	83 e2       	ldi	r24, 0x23	; 35
 25a:	94 ef       	ldi	r25, 0xF4	; 244
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	80 40       	sbci	r24, 0x00	; 0
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <__vector_2+0x90>
 264:	00 c0       	rjmp	.+0      	; 0x266 <__vector_2+0x9a>
 266:	00 00       	nop
		_delay_ms(5000);
		break;
	}
	LCD_Clear();
 268:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_Clear>
	g_BREAK_DELAY = 0;
 26c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		
	/*	clear interrupt flah	*/
	SetBit(GIFR, EXTI_Config->Flag_clear);
 270:	2a b7       	in	r18, 0x3a	; 58
 272:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <__data_end>
 276:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <__data_end+0x1>
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	03 80       	ldd	r0, Z+3	; 0x03
 280:	02 c0       	rjmp	.+4      	; 0x286 <__vector_2+0xba>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	0a 94       	dec	r0
 288:	e2 f7       	brpl	.-8      	; 0x282 <__vector_2+0xb6>
 28a:	82 2b       	or	r24, r18
 28c:	8a bf       	out	0x3a, r24	; 58
	
}
 28e:	ff 91       	pop	r31
 290:	ef 91       	pop	r30
 292:	bf 91       	pop	r27
 294:	af 91       	pop	r26
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	7f 91       	pop	r23
 29c:	6f 91       	pop	r22
 29e:	5f 91       	pop	r21
 2a0:	4f 91       	pop	r20
 2a2:	3f 91       	pop	r19
 2a4:	2f 91       	pop	r18
 2a6:	0f 90       	pop	r0
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	0f 90       	pop	r0
 2ac:	1f 90       	pop	r1
 2ae:	18 95       	reti

000002b0 <LCD_WriteCommand>:
{
uint8_t pos[2] = {0x80 , 0xC0};

LCD_WriteCommand(pos[row]+col);

}
 2b0:	cf 93       	push	r28
 2b2:	c8 2f       	mov	r28, r24
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	63 e0       	ldi	r22, 0x03	; 3
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 2be:	8f e9       	ldi	r24, 0x9F	; 159
 2c0:	9f e0       	ldi	r25, 0x0F	; 15
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCD_WriteCommand+0x12>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCD_WriteCommand+0x18>
 2c8:	00 00       	nop
 2ca:	c4 fb       	bst	r28, 4
 2cc:	44 27       	eor	r20, r20
 2ce:	40 f9       	bld	r20, 0
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 2d8:	c5 fb       	bst	r28, 5
 2da:	44 27       	eor	r20, r20
 2dc:	40 f9       	bld	r20, 0
 2de:	61 e0       	ldi	r22, 0x01	; 1
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 2e6:	c6 fb       	bst	r28, 6
 2e8:	44 27       	eor	r20, r20
 2ea:	40 f9       	bld	r20, 0
 2ec:	62 e0       	ldi	r22, 0x02	; 2
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 2f4:	4c 2f       	mov	r20, r28
 2f6:	44 1f       	adc	r20, r20
 2f8:	44 27       	eor	r20, r20
 2fa:	44 1f       	adc	r20, r20
 2fc:	64 e0       	ldi	r22, 0x04	; 4
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 304:	8f e9       	ldi	r24, 0x9F	; 159
 306:	9f e0       	ldi	r25, 0x0F	; 15
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <LCD_WriteCommand+0x58>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <LCD_WriteCommand+0x5e>
 30e:	00 00       	nop
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	62 e0       	ldi	r22, 0x02	; 2
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 31a:	8f e9       	ldi	r24, 0x9F	; 159
 31c:	9f e0       	ldi	r25, 0x0F	; 15
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <LCD_WriteCommand+0x6e>
 322:	00 c0       	rjmp	.+0      	; 0x324 <LCD_WriteCommand+0x74>
 324:	00 00       	nop
 326:	40 e0       	ldi	r20, 0x00	; 0
 328:	62 e0       	ldi	r22, 0x02	; 2
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 330:	8f e9       	ldi	r24, 0x9F	; 159
 332:	9f e0       	ldi	r25, 0x0F	; 15
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <LCD_WriteCommand+0x84>
 338:	00 c0       	rjmp	.+0      	; 0x33a <LCD_WriteCommand+0x8a>
 33a:	00 00       	nop
 33c:	4c 2f       	mov	r20, r28
 33e:	41 70       	andi	r20, 0x01	; 1
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 348:	c1 fb       	bst	r28, 1
 34a:	44 27       	eor	r20, r20
 34c:	40 f9       	bld	r20, 0
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 356:	c2 fb       	bst	r28, 2
 358:	44 27       	eor	r20, r20
 35a:	40 f9       	bld	r20, 0
 35c:	62 e0       	ldi	r22, 0x02	; 2
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 364:	c3 fb       	bst	r28, 3
 366:	44 27       	eor	r20, r20
 368:	40 f9       	bld	r20, 0
 36a:	64 e0       	ldi	r22, 0x04	; 4
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 372:	8f e9       	ldi	r24, 0x9F	; 159
 374:	9f e0       	ldi	r25, 0x0F	; 15
 376:	01 97       	sbiw	r24, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <LCD_WriteCommand+0xc6>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <LCD_WriteCommand+0xcc>
 37c:	00 00       	nop
 37e:	41 e0       	ldi	r20, 0x01	; 1
 380:	62 e0       	ldi	r22, 0x02	; 2
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 388:	8f e9       	ldi	r24, 0x9F	; 159
 38a:	9f e0       	ldi	r25, 0x0F	; 15
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <LCD_WriteCommand+0xdc>
 390:	00 c0       	rjmp	.+0      	; 0x392 <LCD_WriteCommand+0xe2>
 392:	00 00       	nop
 394:	40 e0       	ldi	r20, 0x00	; 0
 396:	62 e0       	ldi	r22, 0x02	; 2
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 39e:	8f e1       	ldi	r24, 0x1F	; 31
 3a0:	9e e4       	ldi	r25, 0x4E	; 78
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <LCD_WriteCommand+0xf2>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <LCD_WriteCommand+0xf8>
 3a8:	00 00       	nop
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <LCD_Init>:
 3ae:	41 e0       	ldi	r20, 0x01	; 1
 3b0:	63 e0       	ldi	r22, 0x03	; 3
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	0e 94 20 03 	call	0x640	; 0x640 <DIO_setPinDirection>
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	62 e0       	ldi	r22, 0x02	; 2
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	0e 94 20 03 	call	0x640	; 0x640 <DIO_setPinDirection>
 3c2:	41 e0       	ldi	r20, 0x01	; 1
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 20 03 	call	0x640	; 0x640 <DIO_setPinDirection>
 3cc:	41 e0       	ldi	r20, 0x01	; 1
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 20 03 	call	0x640	; 0x640 <DIO_setPinDirection>
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	62 e0       	ldi	r22, 0x02	; 2
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 20 03 	call	0x640	; 0x640 <DIO_setPinDirection>
 3e0:	41 e0       	ldi	r20, 0x01	; 1
 3e2:	64 e0       	ldi	r22, 0x04	; 4
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	0e 94 20 03 	call	0x640	; 0x640 <DIO_setPinDirection>
 3ea:	8f e9       	ldi	r24, 0x9F	; 159
 3ec:	9f e0       	ldi	r25, 0x0F	; 15
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <LCD_Init+0x40>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <LCD_Init+0x46>
 3f4:	00 00       	nop
 3f6:	88 e2       	ldi	r24, 0x28	; 40
 3f8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_WriteCommand>
 3fc:	8f e9       	ldi	r24, 0x9F	; 159
 3fe:	9f e0       	ldi	r25, 0x0F	; 15
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 406:	00 00       	nop
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_WriteCommand>
 40e:	8f e9       	ldi	r24, 0x9F	; 159
 410:	9f e0       	ldi	r25, 0x0F	; 15
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 418:	00 00       	nop
 41a:	8f e0       	ldi	r24, 0x0F	; 15
 41c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_WriteCommand>
 420:	8f e9       	ldi	r24, 0x9F	; 159
 422:	9f e0       	ldi	r25, 0x0F	; 15
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
 42c:	08 95       	ret

0000042e <LCD_WriteChar>:
 42e:	cf 93       	push	r28
 430:	c8 2f       	mov	r28, r24
 432:	41 e0       	ldi	r20, 0x01	; 1
 434:	63 e0       	ldi	r22, 0x03	; 3
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 43c:	8f e9       	ldi	r24, 0x9F	; 159
 43e:	9f e0       	ldi	r25, 0x0F	; 15
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <LCD_WriteChar+0x12>
 444:	00 c0       	rjmp	.+0      	; 0x446 <LCD_WriteChar+0x18>
 446:	00 00       	nop
 448:	c4 fb       	bst	r28, 4
 44a:	44 27       	eor	r20, r20
 44c:	40 f9       	bld	r20, 0
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 456:	c5 fb       	bst	r28, 5
 458:	44 27       	eor	r20, r20
 45a:	40 f9       	bld	r20, 0
 45c:	61 e0       	ldi	r22, 0x01	; 1
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 464:	c6 fb       	bst	r28, 6
 466:	44 27       	eor	r20, r20
 468:	40 f9       	bld	r20, 0
 46a:	62 e0       	ldi	r22, 0x02	; 2
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 472:	4c 2f       	mov	r20, r28
 474:	44 1f       	adc	r20, r20
 476:	44 27       	eor	r20, r20
 478:	44 1f       	adc	r20, r20
 47a:	64 e0       	ldi	r22, 0x04	; 4
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 482:	8f e9       	ldi	r24, 0x9F	; 159
 484:	9f e0       	ldi	r25, 0x0F	; 15
 486:	01 97       	sbiw	r24, 0x01	; 1
 488:	f1 f7       	brne	.-4      	; 0x486 <LCD_WriteChar+0x58>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <LCD_WriteChar+0x5e>
 48c:	00 00       	nop
 48e:	41 e0       	ldi	r20, 0x01	; 1
 490:	62 e0       	ldi	r22, 0x02	; 2
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 498:	8f e9       	ldi	r24, 0x9F	; 159
 49a:	9f e0       	ldi	r25, 0x0F	; 15
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <LCD_WriteChar+0x6e>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <LCD_WriteChar+0x74>
 4a2:	00 00       	nop
 4a4:	40 e0       	ldi	r20, 0x00	; 0
 4a6:	62 e0       	ldi	r22, 0x02	; 2
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 4ae:	8f e9       	ldi	r24, 0x9F	; 159
 4b0:	9f e0       	ldi	r25, 0x0F	; 15
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <LCD_WriteChar+0x84>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <LCD_WriteChar+0x8a>
 4b8:	00 00       	nop
 4ba:	4c 2f       	mov	r20, r28
 4bc:	41 70       	andi	r20, 0x01	; 1
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 4c6:	c1 fb       	bst	r28, 1
 4c8:	44 27       	eor	r20, r20
 4ca:	40 f9       	bld	r20, 0
 4cc:	61 e0       	ldi	r22, 0x01	; 1
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 4d4:	c2 fb       	bst	r28, 2
 4d6:	44 27       	eor	r20, r20
 4d8:	40 f9       	bld	r20, 0
 4da:	62 e0       	ldi	r22, 0x02	; 2
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 4e2:	c3 fb       	bst	r28, 3
 4e4:	44 27       	eor	r20, r20
 4e6:	40 f9       	bld	r20, 0
 4e8:	64 e0       	ldi	r22, 0x04	; 4
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 4f0:	8f e9       	ldi	r24, 0x9F	; 159
 4f2:	9f e0       	ldi	r25, 0x0F	; 15
 4f4:	01 97       	sbiw	r24, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <LCD_WriteChar+0xc6>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <LCD_WriteChar+0xcc>
 4fa:	00 00       	nop
 4fc:	41 e0       	ldi	r20, 0x01	; 1
 4fe:	62 e0       	ldi	r22, 0x02	; 2
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 506:	8f e9       	ldi	r24, 0x9F	; 159
 508:	9f e0       	ldi	r25, 0x0F	; 15
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	f1 f7       	brne	.-4      	; 0x50a <LCD_WriteChar+0xdc>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <LCD_WriteChar+0xe2>
 510:	00 00       	nop
 512:	40 e0       	ldi	r20, 0x00	; 0
 514:	62 e0       	ldi	r22, 0x02	; 2
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 51c:	8f e1       	ldi	r24, 0x1F	; 31
 51e:	9e e4       	ldi	r25, 0x4E	; 78
 520:	01 97       	sbiw	r24, 0x01	; 1
 522:	f1 f7       	brne	.-4      	; 0x520 <LCD_WriteChar+0xf2>
 524:	00 c0       	rjmp	.+0      	; 0x526 <LCD_WriteChar+0xf8>
 526:	00 00       	nop
 528:	cf 91       	pop	r28
 52a:	08 95       	ret

0000052c <LCD_WriteString>:
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	ec 01       	movw	r28, r24
 532:	03 c0       	rjmp	.+6      	; 0x53a <LCD_WriteString+0xe>
 534:	21 96       	adiw	r28, 0x01	; 1
 536:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_WriteChar>
 53a:	88 81       	ld	r24, Y
 53c:	81 11       	cpse	r24, r1
 53e:	fa cf       	rjmp	.-12     	; 0x534 <LCD_WriteString+0x8>
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	08 95       	ret

00000546 <LCD_Clear>:

void LCD_Clear(void)
{
    LCD_WriteCommand(0x01);
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_WriteCommand>
 54c:	08 95       	ret

0000054e <LED_init>:
#include "LED.h"

void LED_init(){
	
	// Set All LEDs as Output
	DIO_setPinDirection(RED_PORT, RED_PIN, DIO_PIN_OUTPUT);
 54e:	41 e0       	ldi	r20, 0x01	; 1
 550:	67 e0       	ldi	r22, 0x07	; 7
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	0e 94 20 03 	call	0x640	; 0x640 <DIO_setPinDirection>
	DIO_setPinDirection(YELLOW_PORT, YELLOW_PIN, DIO_PIN_OUTPUT);
 558:	41 e0       	ldi	r20, 0x01	; 1
 55a:	66 e0       	ldi	r22, 0x06	; 6
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	0e 94 20 03 	call	0x640	; 0x640 <DIO_setPinDirection>
	DIO_setPinDirection(GREEN_PORT, GREEN_PIN, DIO_PIN_OUTPUT);
 562:	41 e0       	ldi	r20, 0x01	; 1
 564:	64 e0       	ldi	r22, 0x04	; 4
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	0e 94 20 03 	call	0x640	; 0x640 <DIO_setPinDirection>
	DIO_setPinDirection(BLUE_PORT, BLUE_PIN, DIO_PIN_OUTPUT);
 56c:	41 e0       	ldi	r20, 0x01	; 1
 56e:	65 e0       	ldi	r22, 0x05	; 5
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	0e 94 20 03 	call	0x640	; 0x640 <DIO_setPinDirection>
	
	// Turn OFF All LEDs
	DIO_WritePin(RED_PORT, RED_PIN, PIN_LOW);
 576:	40 e0       	ldi	r20, 0x00	; 0
 578:	67 e0       	ldi	r22, 0x07	; 7
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
	DIO_WritePin(YELLOW_PORT, YELLOW_PIN, PIN_LOW);
 580:	40 e0       	ldi	r20, 0x00	; 0
 582:	66 e0       	ldi	r22, 0x06	; 6
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
	DIO_WritePin(GREEN_PORT, GREEN_PIN, PIN_LOW);
 58a:	40 e0       	ldi	r20, 0x00	; 0
 58c:	64 e0       	ldi	r22, 0x04	; 4
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
	DIO_WritePin(BLUE_PORT, BLUE_PIN, PIN_LOW);
 594:	40 e0       	ldi	r20, 0x00	; 0
 596:	65 e0       	ldi	r22, 0x05	; 5
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 59e:	08 95       	ret

000005a0 <RED_LED>:
}

void RED_LED(uint8_t state){
	switch (state)
 5a0:	88 23       	and	r24, r24
 5a2:	39 f0       	breq	.+14     	; 0x5b2 <RED_LED+0x12>
 5a4:	81 30       	cpi	r24, 0x01	; 1
 5a6:	51 f4       	brne	.+20     	; 0x5bc <RED_LED+0x1c>
	{
		case ON:
		DIO_WritePin(RED_PORT, RED_PIN, PIN_HIGH);
 5a8:	41 e0       	ldi	r20, 0x01	; 1
 5aa:	67 e0       	ldi	r22, 0x07	; 7
 5ac:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
		break;
 5b0:	08 95       	ret
		case OFF:
		DIO_WritePin(RED_PORT, RED_PIN, PIN_LOW);
 5b2:	40 e0       	ldi	r20, 0x00	; 0
 5b4:	67 e0       	ldi	r22, 0x07	; 7
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 5bc:	08 95       	ret

000005be <YELLOW_LED>:
		break;
	}
}

void YELLOW_LED(uint8_t state){
	switch (state)
 5be:	88 23       	and	r24, r24
 5c0:	39 f0       	breq	.+14     	; 0x5d0 <YELLOW_LED+0x12>
 5c2:	81 30       	cpi	r24, 0x01	; 1
 5c4:	51 f4       	brne	.+20     	; 0x5da <YELLOW_LED+0x1c>
	{
		case ON:
		ToggleBit(YELLOW_REGISTER, YELLOW_PIN);
 5c6:	9b b3       	in	r25, 0x1b	; 27
 5c8:	80 e4       	ldi	r24, 0x40	; 64
 5ca:	89 27       	eor	r24, r25
 5cc:	8b bb       	out	0x1b, r24	; 27
		break;
 5ce:	08 95       	ret
		case OFF:
		DIO_WritePin(YELLOW_PORT, YELLOW_PIN, PIN_LOW);
 5d0:	40 e0       	ldi	r20, 0x00	; 0
 5d2:	66 e0       	ldi	r22, 0x06	; 6
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 5da:	08 95       	ret

000005dc <GREEN_LED>:
		break;
	}
}

void GREEN_LED(uint8_t state){
	switch (state)
 5dc:	88 23       	and	r24, r24
 5de:	41 f0       	breq	.+16     	; 0x5f0 <GREEN_LED+0x14>
 5e0:	81 30       	cpi	r24, 0x01	; 1
 5e2:	59 f4       	brne	.+22     	; 0x5fa <GREEN_LED+0x1e>
	{
		case ON:
		DIO_WritePin(GREEN_PORT, GREEN_PIN, PIN_HIGH);
 5e4:	41 e0       	ldi	r20, 0x01	; 1
 5e6:	64 e0       	ldi	r22, 0x04	; 4
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
		break;
 5ee:	08 95       	ret
		case OFF:
		DIO_WritePin(GREEN_PORT, GREEN_PIN, PIN_LOW);
 5f0:	40 e0       	ldi	r20, 0x00	; 0
 5f2:	64 e0       	ldi	r22, 0x04	; 4
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 5fa:	08 95       	ret

000005fc <BLUE_LED>:
		break;
	}
}

void BLUE_LED(uint8_t state){
	switch (state)
 5fc:	88 23       	and	r24, r24
 5fe:	41 f0       	breq	.+16     	; 0x610 <BLUE_LED+0x14>
 600:	81 30       	cpi	r24, 0x01	; 1
 602:	59 f4       	brne	.+22     	; 0x61a <BLUE_LED+0x1e>
	{
		case ON:
		DIO_WritePin(BLUE_PORT, BLUE_PIN, PIN_HIGH);
 604:	41 e0       	ldi	r20, 0x01	; 1
 606:	65 e0       	ldi	r22, 0x05	; 5
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
		break;
 60e:	08 95       	ret
		case OFF:
		DIO_WritePin(BLUE_PORT, BLUE_PIN, PIN_LOW);
 610:	40 e0       	ldi	r20, 0x00	; 0
 612:	65 e0       	ldi	r22, 0x05	; 5
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	0e 94 90 03 	call	0x720	; 0x720 <DIO_WritePin>
 61a:	08 95       	ret

0000061c <main>:
uint8_t state = green_state;

int main(void)
{
	
	LED_init();
 61c:	0e 94 a7 02 	call	0x54e	; 0x54e <LED_init>
	LCD_Init();
 620:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_Init>
	LCD_Clear();
 624:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_Clear>
	state = green_state;
 628:	8a e0       	ldi	r24, 0x0A	; 10
 62a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <state>

	PedestrianButton_init();	
 62e:	0e 94 cb 00 	call	0x196	; 0x196 <PedestrianButton_init>
	
	Traffic_state(&state);
 632:	81 e6       	ldi	r24, 0x61	; 97
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	0e 94 80 00 	call	0x100	; 0x100 <Traffic_state>
}
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	08 95       	ret

00000640 <DIO_setPinDirection>:
	}
}

void DIO_setPinDirection(uint8_t Port, uint8_t pin, uint8_t dir)
{
	if( dir == DIO_PIN_OUTPUT)
 640:	41 30       	cpi	r20, 0x01	; 1
 642:	a1 f5       	brne	.+104    	; 0x6ac <DIO_setPinDirection+0x6c>
	{
		switch(Port)
 644:	81 30       	cpi	r24, 0x01	; 1
 646:	89 f0       	breq	.+34     	; 0x66a <DIO_setPinDirection+0x2a>
 648:	28 f0       	brcs	.+10     	; 0x654 <DIO_setPinDirection+0x14>
 64a:	82 30       	cpi	r24, 0x02	; 2
 64c:	c9 f0       	breq	.+50     	; 0x680 <DIO_setPinDirection+0x40>
 64e:	83 30       	cpi	r24, 0x03	; 3
 650:	11 f1       	breq	.+68     	; 0x696 <DIO_setPinDirection+0x56>
 652:	08 95       	ret
		{
			case DIO_PORTA:
			SetBit(DDRA, pin);
 654:	2a b3       	in	r18, 0x1a	; 26
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	02 c0       	rjmp	.+4      	; 0x660 <DIO_setPinDirection+0x20>
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	6a 95       	dec	r22
 662:	e2 f7       	brpl	.-8      	; 0x65c <DIO_setPinDirection+0x1c>
 664:	82 2b       	or	r24, r18
 666:	8a bb       	out	0x1a, r24	; 26
			break;
 668:	08 95       	ret
			
			case DIO_PORTB:
			SetBit(DDRB, pin);
 66a:	27 b3       	in	r18, 0x17	; 23
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_setPinDirection+0x36>
 672:	88 0f       	add	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	6a 95       	dec	r22
 678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_setPinDirection+0x32>
 67a:	82 2b       	or	r24, r18
 67c:	87 bb       	out	0x17, r24	; 23
			break;
 67e:	08 95       	ret
			
			case DIO_PORTC:
			SetBit(DDRC, pin);
 680:	24 b3       	in	r18, 0x14	; 20
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_setPinDirection+0x4c>
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	6a 95       	dec	r22
 68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_setPinDirection+0x48>
 690:	82 2b       	or	r24, r18
 692:	84 bb       	out	0x14, r24	; 20
			break;
 694:	08 95       	ret
			
			case DIO_PORTD:
			SetBit(DDRD, pin);
 696:	21 b3       	in	r18, 0x11	; 17
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <DIO_setPinDirection+0x62>
 69e:	88 0f       	add	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	6a 95       	dec	r22
 6a4:	e2 f7       	brpl	.-8      	; 0x69e <DIO_setPinDirection+0x5e>
 6a6:	82 2b       	or	r24, r18
 6a8:	81 bb       	out	0x11, r24	; 17
			break;
 6aa:	08 95       	ret
			default:
			/*do nothing*/
			break;
		}
	}
	else if(dir == DIO_PIN_INPUT)
 6ac:	41 11       	cpse	r20, r1
 6ae:	37 c0       	rjmp	.+110    	; 0x71e <DIO_setPinDirection+0xde>
	{
		switch(Port)
 6b0:	81 30       	cpi	r24, 0x01	; 1
 6b2:	91 f0       	breq	.+36     	; 0x6d8 <DIO_setPinDirection+0x98>
 6b4:	28 f0       	brcs	.+10     	; 0x6c0 <DIO_setPinDirection+0x80>
 6b6:	82 30       	cpi	r24, 0x02	; 2
 6b8:	d9 f0       	breq	.+54     	; 0x6f0 <DIO_setPinDirection+0xb0>
 6ba:	83 30       	cpi	r24, 0x03	; 3
 6bc:	29 f1       	breq	.+74     	; 0x708 <DIO_setPinDirection+0xc8>
 6be:	08 95       	ret
		{
			case DIO_PORTA:
			ClearBit(DDRA, pin);
 6c0:	2a b3       	in	r18, 0x1a	; 26
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <DIO_setPinDirection+0x8c>
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	6a 95       	dec	r22
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <DIO_setPinDirection+0x88>
 6d0:	80 95       	com	r24
 6d2:	82 23       	and	r24, r18
 6d4:	8a bb       	out	0x1a, r24	; 26
			break;
 6d6:	08 95       	ret
			
			case DIO_PORTB:
			ClearBit(DDRB, pin);
 6d8:	27 b3       	in	r18, 0x17	; 23
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <DIO_setPinDirection+0xa4>
 6e0:	88 0f       	add	r24, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	6a 95       	dec	r22
 6e6:	e2 f7       	brpl	.-8      	; 0x6e0 <DIO_setPinDirection+0xa0>
 6e8:	80 95       	com	r24
 6ea:	82 23       	and	r24, r18
 6ec:	87 bb       	out	0x17, r24	; 23
			break;
 6ee:	08 95       	ret
			
			case DIO_PORTC:
			ClearBit(DDRC, pin);
 6f0:	24 b3       	in	r18, 0x14	; 20
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <DIO_setPinDirection+0xbc>
 6f8:	88 0f       	add	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	6a 95       	dec	r22
 6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <DIO_setPinDirection+0xb8>
 700:	80 95       	com	r24
 702:	82 23       	and	r24, r18
 704:	84 bb       	out	0x14, r24	; 20
			break;
 706:	08 95       	ret
			
			case DIO_PORTD:
			ClearBit(DDRD, pin);
 708:	21 b3       	in	r18, 0x11	; 17
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	02 c0       	rjmp	.+4      	; 0x714 <DIO_setPinDirection+0xd4>
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	6a 95       	dec	r22
 716:	e2 f7       	brpl	.-8      	; 0x710 <DIO_setPinDirection+0xd0>
 718:	80 95       	com	r24
 71a:	82 23       	and	r24, r18
 71c:	81 bb       	out	0x11, r24	; 17
 71e:	08 95       	ret

00000720 <DIO_WritePin>:
	}
}

void DIO_WritePin(uint8_t Port, uint8_t pin, uint8_t val)
{
	if(val)
 720:	44 23       	and	r20, r20
 722:	a1 f1       	breq	.+104    	; 0x78c <DIO_WritePin+0x6c>
	{
		switch(Port)
 724:	81 30       	cpi	r24, 0x01	; 1
 726:	89 f0       	breq	.+34     	; 0x74a <DIO_WritePin+0x2a>
 728:	28 f0       	brcs	.+10     	; 0x734 <DIO_WritePin+0x14>
 72a:	82 30       	cpi	r24, 0x02	; 2
 72c:	c9 f0       	breq	.+50     	; 0x760 <DIO_WritePin+0x40>
 72e:	83 30       	cpi	r24, 0x03	; 3
 730:	11 f1       	breq	.+68     	; 0x776 <DIO_WritePin+0x56>
 732:	08 95       	ret
		{
			case DIO_PORTA:
			SetBit(PORTA, pin);
 734:	2b b3       	in	r18, 0x1b	; 27
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	02 c0       	rjmp	.+4      	; 0x740 <DIO_WritePin+0x20>
 73c:	88 0f       	add	r24, r24
 73e:	99 1f       	adc	r25, r25
 740:	6a 95       	dec	r22
 742:	e2 f7       	brpl	.-8      	; 0x73c <DIO_WritePin+0x1c>
 744:	82 2b       	or	r24, r18
 746:	8b bb       	out	0x1b, r24	; 27
			break;
 748:	08 95       	ret
		
			case DIO_PORTB:
			SetBit(PORTB, pin);
 74a:	28 b3       	in	r18, 0x18	; 24
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	02 c0       	rjmp	.+4      	; 0x756 <DIO_WritePin+0x36>
 752:	88 0f       	add	r24, r24
 754:	99 1f       	adc	r25, r25
 756:	6a 95       	dec	r22
 758:	e2 f7       	brpl	.-8      	; 0x752 <DIO_WritePin+0x32>
 75a:	82 2b       	or	r24, r18
 75c:	88 bb       	out	0x18, r24	; 24
			break;
 75e:	08 95       	ret
		
			case DIO_PORTC:
			SetBit(PORTC, pin);
 760:	25 b3       	in	r18, 0x15	; 21
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	02 c0       	rjmp	.+4      	; 0x76c <DIO_WritePin+0x4c>
 768:	88 0f       	add	r24, r24
 76a:	99 1f       	adc	r25, r25
 76c:	6a 95       	dec	r22
 76e:	e2 f7       	brpl	.-8      	; 0x768 <DIO_WritePin+0x48>
 770:	82 2b       	or	r24, r18
 772:	85 bb       	out	0x15, r24	; 21
			break;
 774:	08 95       	ret
		
			case DIO_PORTD:
			SetBit(PORTD, pin);
 776:	22 b3       	in	r18, 0x12	; 18
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	02 c0       	rjmp	.+4      	; 0x782 <DIO_WritePin+0x62>
 77e:	88 0f       	add	r24, r24
 780:	99 1f       	adc	r25, r25
 782:	6a 95       	dec	r22
 784:	e2 f7       	brpl	.-8      	; 0x77e <DIO_WritePin+0x5e>
 786:	82 2b       	or	r24, r18
 788:	82 bb       	out	0x12, r24	; 18
			break;
 78a:	08 95       	ret
			break;
		}
	}
	else
	{
		switch(Port)
 78c:	81 30       	cpi	r24, 0x01	; 1
 78e:	91 f0       	breq	.+36     	; 0x7b4 <DIO_WritePin+0x94>
 790:	28 f0       	brcs	.+10     	; 0x79c <DIO_WritePin+0x7c>
 792:	82 30       	cpi	r24, 0x02	; 2
 794:	d9 f0       	breq	.+54     	; 0x7cc <DIO_WritePin+0xac>
 796:	83 30       	cpi	r24, 0x03	; 3
 798:	29 f1       	breq	.+74     	; 0x7e4 <DIO_WritePin+0xc4>
 79a:	08 95       	ret
		{
			case DIO_PORTA:
			ClearBit(PORTA, pin);
 79c:	2b b3       	in	r18, 0x1b	; 27
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <DIO_WritePin+0x88>
 7a4:	88 0f       	add	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	6a 95       	dec	r22
 7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <DIO_WritePin+0x84>
 7ac:	80 95       	com	r24
 7ae:	82 23       	and	r24, r18
 7b0:	8b bb       	out	0x1b, r24	; 27
			break;
 7b2:	08 95       	ret
			
			case DIO_PORTB:
			ClearBit(PORTB, pin);
 7b4:	28 b3       	in	r18, 0x18	; 24
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <DIO_WritePin+0xa0>
 7bc:	88 0f       	add	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	6a 95       	dec	r22
 7c2:	e2 f7       	brpl	.-8      	; 0x7bc <DIO_WritePin+0x9c>
 7c4:	80 95       	com	r24
 7c6:	82 23       	and	r24, r18
 7c8:	88 bb       	out	0x18, r24	; 24
			break;
 7ca:	08 95       	ret
			
			case DIO_PORTC:
			ClearBit(PORTC, pin);
 7cc:	25 b3       	in	r18, 0x15	; 21
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <DIO_WritePin+0xb8>
 7d4:	88 0f       	add	r24, r24
 7d6:	99 1f       	adc	r25, r25
 7d8:	6a 95       	dec	r22
 7da:	e2 f7       	brpl	.-8      	; 0x7d4 <DIO_WritePin+0xb4>
 7dc:	80 95       	com	r24
 7de:	82 23       	and	r24, r18
 7e0:	85 bb       	out	0x15, r24	; 21
			break;
 7e2:	08 95       	ret
			
			case DIO_PORTD:
			ClearBit(PORTD, pin);
 7e4:	22 b3       	in	r18, 0x12	; 18
 7e6:	81 e0       	ldi	r24, 0x01	; 1
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <DIO_WritePin+0xd0>
 7ec:	88 0f       	add	r24, r24
 7ee:	99 1f       	adc	r25, r25
 7f0:	6a 95       	dec	r22
 7f2:	e2 f7       	brpl	.-8      	; 0x7ec <DIO_WritePin+0xcc>
 7f4:	80 95       	com	r24
 7f6:	82 23       	and	r24, r18
 7f8:	82 bb       	out	0x12, r24	; 18
 7fa:	08 95       	ret

000007fc <EXTI_GlobalSet>:


void EXTI_GlobalSet()
{
	#if	GLOBAL_INTERRUPT == GLOBAL_INTERRUPT_ENABLE
		SetBit(SREG, 7);
 7fc:	8f b7       	in	r24, 0x3f	; 63
 7fe:	80 68       	ori	r24, 0x80	; 128
 800:	8f bf       	out	0x3f, r24	; 63
 802:	08 95       	ret

00000804 <EXTI_interruptconfig>:
		ClearBit(SREG, 7);
	#endif
}

void EXTI_interruptconfig(EXTi_INTERRUPTconfiguration *config_struct)
{
 804:	cf 93       	push	r28
 806:	df 93       	push	r29
 808:	ec 01       	movw	r28, r24
	/*	enable gloabl interrupts	*/
	EXTI_GlobalSet();
 80a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <EXTI_GlobalSet>
	
		/*	enable external interrupt request	*/
		SetBit(GICR, config_struct->IRQ_en);
 80e:	2b b7       	in	r18, 0x3b	; 59
 810:	81 e0       	ldi	r24, 0x01	; 1
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	0a 80       	ldd	r0, Y+2	; 0x02
 816:	02 c0       	rjmp	.+4      	; 0x81c <EXTI_interruptconfig+0x18>
 818:	88 0f       	add	r24, r24
 81a:	99 1f       	adc	r25, r25
 81c:	0a 94       	dec	r0
 81e:	e2 f7       	brpl	.-8      	; 0x818 <EXTI_interruptconfig+0x14>
 820:	82 2b       	or	r24, r18
 822:	8b bf       	out	0x3b, r24	; 59
		
		switch(config_struct->EXTI_source)
 824:	88 81       	ld	r24, Y
 826:	81 30       	cpi	r24, 0x01	; 1
 828:	49 f0       	breq	.+18     	; 0x83c <EXTI_interruptconfig+0x38>
 82a:	18 f0       	brcs	.+6      	; 0x832 <EXTI_interruptconfig+0x2e>
 82c:	82 30       	cpi	r24, 0x02	; 2
 82e:	89 f0       	breq	.+34     	; 0x852 <EXTI_interruptconfig+0x4e>
 830:	1a c0       	rjmp	.+52     	; 0x866 <__stack+0x7>
		{
		/*	external interrupts trigger control	*/
		case EX_INT0:
			MCUCR |= config_struct->EXTI_trigger;
 832:	95 b7       	in	r25, 0x35	; 53
 834:	89 81       	ldd	r24, Y+1	; 0x01
 836:	89 2b       	or	r24, r25
 838:	85 bf       	out	0x35, r24	; 53
			break;
 83a:	15 c0       	rjmp	.+42     	; 0x866 <__stack+0x7>
			
		case EX_INT1:
			MCUCR |= config_struct->EXTI_trigger << 2;
 83c:	25 b7       	in	r18, 0x35	; 53
 83e:	99 81       	ldd	r25, Y+1	; 0x01
 840:	89 2f       	mov	r24, r25
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	88 0f       	add	r24, r24
 846:	99 1f       	adc	r25, r25
 848:	88 0f       	add	r24, r24
 84a:	99 1f       	adc	r25, r25
 84c:	82 2b       	or	r24, r18
 84e:	85 bf       	out	0x35, r24	; 53
			break;
 850:	0a c0       	rjmp	.+20     	; 0x866 <__stack+0x7>
			
		case EX_INT2:
			if(config_struct->EXTI_trigger == FALLING_EDGE)
 852:	89 81       	ldd	r24, Y+1	; 0x01
 854:	82 30       	cpi	r24, 0x02	; 2
 856:	21 f4       	brne	.+8      	; 0x860 <__stack+0x1>
				ClearBit(MCUCSR, 6);
 858:	84 b7       	in	r24, 0x34	; 52
 85a:	8f 7b       	andi	r24, 0xBF	; 191
 85c:	84 bf       	out	0x34, r24	; 52
 85e:	03 c0       	rjmp	.+6      	; 0x866 <__stack+0x7>
			else
				SetBit(MCUCSR, 6);
 860:	84 b7       	in	r24, 0x34	; 52
 862:	80 64       	ori	r24, 0x40	; 64
 864:	84 bf       	out	0x34, r24	; 52
		}
	
 866:	df 91       	pop	r29
 868:	cf 91       	pop	r28
 86a:	08 95       	ret

0000086c <_exit>:
 86c:	f8 94       	cli

0000086e <__stop_program>:
 86e:	ff cf       	rjmp	.-2      	; 0x86e <__stop_program>
